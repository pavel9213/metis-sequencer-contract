{
  "address": "0x5C358cc2400f56A73c33b43E8A5924a52a1451A2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "SequencerRewardRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newCurrentBatch",
          "type": "uint256"
        }
      ],
      "name": "SetCurrentBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newLockingInfo",
          "type": "address"
        }
      ],
      "name": "UpdateLockingInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMaxLock",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxAmounts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinLock",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinAmounts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newMpc",
          "type": "address"
        }
      ],
      "name": "UpdateMpc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newNftContract",
          "type": "address"
        }
      ],
      "name": "UpdateNFTContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdateSignerUpdateLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "WhiteListAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NFTContract",
      "outputs": [
        {
          "internalType": "contract LockingNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFTCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchSubmitHistory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payeer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_sequencers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finishedBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "batchSubmitRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSequencerSetSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSequencerSetTotalLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentUnlockedInit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockHeight",
          "type": "uint256"
        }
      ],
      "name": "fetchMpcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "forceUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getSequencerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mpc",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        }
      ],
      "name": "isSequencer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "latestSignerUpdateBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "lockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "logger",
      "outputs": [
        {
          "internalType": "contract LockingInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mpcHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMpcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perSecondReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "lockRewards",
          "type": "bool"
        }
      ],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        }
      ],
      "name": "sequencerLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        }
      ],
      "name": "sequencerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sequencerStateChanges",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "lockerCount",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sequencers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activationBatch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deactivationBatch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deactivationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "enum LockingPool.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setSequencerRewardRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "setWhiteListAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerToSequencer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerUpdateLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsLiquidated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlockClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockingInfo",
          "type": "address"
        }
      ],
      "name": "updateLockingInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLock",
          "type": "uint256"
        }
      ],
      "name": "updateMaxAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLock",
          "type": "uint256"
        }
      ],
      "name": "updateMinAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMpc",
          "type": "address"
        }
      ],
      "name": "updateMpc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "name": "updateNFTContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "updatePerSecondReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "updateSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "updateSignerUpdateLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newWithdrawDelayTime",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawDelayTimeValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteListAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteListBoundSequencer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c6ed1e968b994762d1fddb65483605f4ee74263b35ade25e80e087ea5b2896a",
  "receipt": {
    "to": null,
    "from": "0x0000001aB69b564959DAeF0F6dcd206dB0ACDc78",
    "contractAddress": "0x5C358cc2400f56A73c33b43E8A5924a52a1451A2",
    "transactionIndex": 12,
    "gasUsed": "4503520",
    "logsBloom": "0x
    "blockHash": "0x0a021936f505eae35a8d743b570f14fc45ee48c753f2a6de6c6cf1ff0627062a",
    "transactionHash": "0x1c6ed1e968b994762d1fddb65483605f4ee74263b35ade25e80e087ea5b2896a",
    "logs": [],
    "blockNumber": 990714,
    "cumulativeGasUsed": "4755984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23a4193148e160c051d797654ae5f1e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SequencerRewardRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCurrentBatch\",\"type\":\"uint256\"}],\"name\":\"SetCurrentBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newLockingInfo\",\"type\":\"address\"}],\"name\":\"UpdateLockingInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxLock\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinLock\",\"type\":\"uint256\"}],\"name\":\"UpdateMinAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMpc\",\"type\":\"address\"}],\"name\":\"UpdateMpc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newNftContract\",\"type\":\"address\"}],\"name\":\"UpdateNFTContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateSignerUpdateLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTContract\",\"outputs\":[{\"internalType\":\"contract LockingNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchSubmitHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payeer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finishedBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchSubmitRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSequencerSetSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSequencerSetTotalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUnlockedInit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"fetchMpcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"forceUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSequencerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mpc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"}],\"name\":\"isSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestSignerUpdateBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract LockingInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mpcHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMpcAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lockRewards\",\"type\":\"bool\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"}],\"name\":\"sequencerLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"}],\"name\":\"sequencerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencerStateChanges\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lockerCount\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"enum LockingPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setSequencerRewardRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"setWhiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerToSequencer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerUpdateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsLiquidated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockingInfo\",\"type\":\"address\"}],\"name\":\"updateLockingInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLock\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLock\",\"type\":\"uint256\"}],\"name\":\"updateMinAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMpc\",\"type\":\"address\"}],\"name\":\"updateMpc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"updateNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"updatePerSecondReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"updateSequencerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"updateSignerUpdateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawDelayTime\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawDelayTimeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListBoundSequencer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"SequencerRewardRecipientChanged(uint256,address)\":{\"details\":\"Emitted when reward recipient address update in 'setSequencerRewardRecipient'\",\"params\":{\"recipient\":\"the address receive reward token\",\"sequencerId\":\"the sequencerId\"}},\"SetCurrentBatch(uint256)\":{\"details\":\"Emitted when current batch update in 'SetCurrentBatch'\",\"params\":{\"_newCurrentBatch\":\"new batch id.\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"UpdateLockingInfo(address)\":{\"details\":\"Emitted when nft contract update in 'UpdateLockingInfo'\",\"params\":{\"_newLockingInfo\":\"new contract address.\"}},\"UpdateMaxAmounts(uint256)\":{\"details\":\"Emitted when min lock amount update in 'UpdateMaxAmounts'\",\"params\":{\"_newMaxLock\":\"new max lock.\"}},\"UpdateMinAmounts(uint256)\":{\"details\":\"Emitted when min lock amount update in 'UpdateMinAmounts'\",\"params\":{\"_newMinLock\":\"new min lock.\"}},\"UpdateMpc(address)\":{\"details\":\"Emitted when mpc address update in 'UpdateMpc'\",\"params\":{\"_newMpc\":\"new min lock.\"}},\"UpdateNFTContract(address)\":{\"details\":\"Emitted when nft contract update in 'UpdateNFTContract'\",\"params\":{\"_newNftContract\":\"new contract address.\"}},\"UpdateSignerUpdateLimit(uint256)\":{\"details\":\"Emitted when signer update limit update in 'UpdateSignerUpdateLimit'\",\"params\":{\"_newLimit\":\"new limit.\"}},\"WhiteListAdded(address,bool)\":{\"details\":\"Emitted when white address update in 'setWhiteListAddress'\",\"params\":{\"user\":\"the address who can lock token\",\"verified\":\"white address state\"}}},\"kind\":\"dev\",\"methods\":{\"batchSubmitRewards(uint256,address,uint256,uint256,address[],uint256[],bytes)\":{\"details\":\"batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution\",\"params\":{\"_sequencers\":\"Those sequencers can receive rewards\",\"batchId\":\"The batchId that submitted the reward is that\",\"endEpoch\":\"The endEpoch that submitted the reward is that\",\"finishedBlocks\":\"How many blocks each sequencer finished.\",\"payeer\":\"Who Pays the Reward Tokens\",\"signature\":\"Confirmed by mpc and signed for reward distribution\",\"startEpoch\":\"The startEpoch that submitted the reward is that\"}},\"currentSequencerSetSize()\":{\"details\":\"currentSequencerSetSize  get all sequencer count\"},\"currentSequencerSetTotalLock()\":{\"details\":\"currentSequencerSetTotalLock get total lock amount for all sequencers\"},\"fetchMpcAddress(uint256)\":{\"details\":\"fetchMpcAddress query mpc address by L1 block height, used by batch-submitter\",\"params\":{\"blockHeight\":\"the L1 block height\"}},\"forceUnlock(uint256,uint32)\":{\"details\":\"forceUnlock Allow owner to force a sequencer node to exit\",\"params\":{\"l2Gas\":\"bridge reward to L2 gasLimit\",\"sequencerId\":\"unique integer to identify a sequencer.\"}},\"getSequencerId(address)\":{\"details\":\"getSequencerId query sequencer id by signer address\",\"params\":{\"user\":\"sequencer signer address\"}},\"lockFor(address,uint256,bytes)\":{\"details\":\"lockFor is used to lock Metis and participate in the sequencer block node application\",\"params\":{\"amount\":\"Amount of L1 metis token to lock for.\",\"signerPubkey\":\"sequencer signer pubkey\",\"user\":\"sequencer signer address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"ownerOf query owner of the NFT\",\"params\":{\"tokenId\":\"NFT token id\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"relock(uint256,uint256,bool)\":{\"details\":\"relock Allow sequencer to increase the amount of locked positions\",\"params\":{\"amount\":\"Amount of L1 metis token to relock for.\",\"lockRewards\":\"Whether to lock the current rewards\",\"sequencerId\":\"unique integer to identify a sequencer.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sequencerLock(uint256)\":{\"details\":\"sequencerLock return the total lock amount of sequencer\",\"params\":{\"sequencerId\":\"sequencer id\"}},\"sequencerReward(uint256)\":{\"details\":\"sequencerReward query sequencer current reward\",\"params\":{\"sequencerId\":\"sequencerid\"}},\"setPause()\":{\"details\":\"setPause can set the contract not suspended status\"},\"setSequencerRewardRecipient(uint256,address)\":{\"details\":\"setSequencerRewardRecipient Allow sequencer owner to set a reward recipient\",\"params\":{\"recipient\":\"Who will receive the reward token\",\"sequencerId\":\"The sequencerId\"}},\"setUnpause()\":{\"details\":\"setUnpause can cancel the suspended state\"},\"setWhiteListAddress(address,bool)\":{\"details\":\"setWhiteListAddress Allow owner to update white address list\",\"params\":{\"user\":\"the address who can lock token\",\"verified\":\"white address state\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(uint256,uint32)\":{\"details\":\"unlock is used to unlock Metis and exit the sequencer node\",\"params\":{\"l2Gas\":\"bridge reward to L2 gasLimit\",\"sequencerId\":\"sequencer id\"}},\"unlockClaim(uint256,uint32)\":{\"details\":\"unlockClaim Because unlock has a waiting period, after the waiting period is over, you can claim locked tokens\",\"params\":{\"l2Gas\":\"bridge reward to L2 gasLimit\",\"sequencerId\":\"sequencer id\"}},\"updateLockingInfo(address)\":{\"details\":\"updateLockingInfo Allow owner update the locking info contract address\",\"params\":{\"_lockingInfo\":\"new locking info contract address\"}},\"updateMaxAmounts(uint256)\":{\"details\":\"updateMaxAmounts Allow owner to update max lock amount\",\"params\":{\"_maxLock\":\"new max lock amount\"}},\"updateMinAmounts(uint256)\":{\"details\":\"updateMinAmounts Allow owner to update min lock amount\",\"params\":{\"_minLock\":\"new min lock amount\"}},\"updateMpc(address)\":{\"details\":\"updateMpc Allow owner to update new mpc address\",\"params\":{\"_newMpc\":\"new mpc\"}},\"updateNFTContract(address)\":{\"details\":\"updateNFTContract Allow owner update the NFT contract address\",\"params\":{\"_nftContract\":\"new NFT contract address\"}},\"updatePerSecondReward(uint256)\":{\"details\":\"updatePerSecondReward  Allow owner to set per block reward\",\"params\":{\"newReward\":\"the new reward\"}},\"updateSequencerThreshold(uint256)\":{\"details\":\"updateSequencerThreshold  Allow owner to set max sequencer threshold\",\"params\":{\"newThreshold\":\"the new threshold\"}},\"updateSigner(uint256,bytes)\":{\"details\":\"updateSigner Allow sqeuencer to update new signers to replace old signer addresses\\uff0cand NFT holder will be transfer driectly\",\"params\":{\"sequencerId\":\"unique integer to identify a sequencer.\",\"signerPubkey\":\"the new signer pubkey address\"}},\"updateSignerUpdateLimit(uint256)\":{\"details\":\"updateSignerUpdateLimit Allow owner to set signer update max limit\",\"params\":{\"_limit\":\"new limit\"}},\"updateWithdrawDelayTimeValue(uint256)\":{\"details\":\"updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.\",\"params\":{\"newWithdrawDelayTime\":\"new withdraw delay time\"}},\"withdrawRewards(uint256,uint32)\":{\"details\":\"withdrawRewards withdraw current rewards\",\"params\":{\"l2Gas\":\"bridge reward to L2 gasLimit\",\"sequencerId\":\"unique integer to identify a sequencer.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockingPool.sol\":\"LockingPool\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LockingInfo is Ownable {\\n    mapping(uint256 => uint256) public sequencerNonce;\\n    address public immutable lockingPool;\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amoun in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateSequencerThreshold()'.\\n     * @param newThreshold new threshold\\n     * @param oldThreshold  old threshold\\n     */\\n    event ThresholdChange(uint256 newThreshold, uint256 oldThreshold);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateWithdrawDelayTimeValue()'.\\n     * @param newWithrawDelayTime new withdraw delay time\\n     * @param oldWithrawDelayTime  old withdraw delay time\\n     */\\n    event WithrawDelayTimeChange(\\n        uint256 newWithrawDelayTime,\\n        uint256 oldWithrawDelayTime\\n    );\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\\n     * @param newReward new block reward\\n     * @param oldReward  old block reward\\n     */\\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when batch update in  'updateEpochLength'\\n     * @param _oldEpochLength old epoch length.\\n     * @param _newEpochLength new epoch length.\\n     * @param _effectiveBatch effective batch id.\\n     */\\n    event UpdateEpochLength(\\n        uint256 _oldEpochLength,\\n        uint256 _newEpochLength,\\n        uint256 _effectiveBatch\\n    );\\n\\n    modifier onlyLockingPool() {\\n        require(lockingPool == msg.sender, \\\"Invalid sender, not locking pool\\\");\\n        _;\\n    }\\n\\n    constructor(address _lockingPool) {\\n        lockingPool = _lockingPool;\\n    }\\n\\n    /**\\n     * @dev updateNonce can update nonce for sequencrs by owner\\n     * @param sequencerIds the sequencer ids.\\n     * @param nonces the sequencer nonces\\n     */\\n    function updateNonce(\\n        uint256[] calldata sequencerIds,\\n        uint256[] calldata nonces\\n    ) external onlyOwner {\\n        require(sequencerIds.length == nonces.length, \\\"args length mismatch\\\");\\n\\n        for (uint256 i = 0; i < sequencerIds.length; ++i) {\\n            sequencerNonce[sequencerIds[i]] = nonces[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev logLocked log event Locked\\n     */\\n    function logLocked(\\n        address signer,\\n        bytes memory signerPubkey,\\n        uint256 sequencerId,\\n        uint256 activationBatch,\\n        uint256 amount,\\n        uint256 total\\n    ) external onlyLockingPool {\\n        sequencerNonce[sequencerId] = sequencerNonce[sequencerId] + 1;\\n        emit Locked(\\n            signer,\\n            sequencerId,\\n            sequencerNonce[sequencerId],\\n            activationBatch,\\n            amount,\\n            total,\\n            signerPubkey\\n        );\\n    }\\n\\n    /**\\n     * @dev logUnlocked log event logUnlocked\\n     */\\n    function logUnlocked(\\n        address user,\\n        uint256 sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    ) external onlyLockingPool {\\n        emit Unlocked(user, sequencerId, amount, total);\\n    }\\n\\n    /**\\n     * @dev logUnlockInit log event logUnlockInit\\n     */\\n    function logUnlockInit(\\n        address user,\\n        uint256 sequencerId,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 amount\\n    ) external onlyLockingPool {\\n        sequencerNonce[sequencerId] = sequencerNonce[sequencerId] + 1;\\n        emit UnlockInit(\\n            user,\\n            sequencerId,\\n            sequencerNonce[sequencerId],\\n            deactivationBatch,\\n            deactivationTime,\\n            unlockClaimTime,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev logSignerChange log event SignerChange\\n     */\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        bytes memory signerPubkey\\n    ) external onlyLockingPool {\\n        sequencerNonce[sequencerId] = sequencerNonce[sequencerId] + 1;\\n        emit SignerChange(\\n            sequencerId,\\n            sequencerNonce[sequencerId],\\n            oldSigner,\\n            newSigner,\\n            signerPubkey\\n        );\\n    }\\n\\n    /**\\n     * @dev logRelockd log event Relocked\\n     */\\n    function logRelockd(\\n        uint256 sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    ) external onlyLockingPool {\\n        emit Relocked(sequencerId, amount, total);\\n    }\\n\\n    /**\\n     * @dev logThresholdChange log event ThresholdChange\\n     */\\n    function logThresholdChange(\\n        uint256 newThreshold,\\n        uint256 oldThreshold\\n    ) external onlyLockingPool {\\n        emit ThresholdChange(newThreshold, oldThreshold);\\n    }\\n\\n    /**\\n     * @dev logWithrawDelayTimeChange log event WithrawDelayTimeChange\\n     */\\n    function logWithrawDelayTimeChange(\\n        uint256 newWithrawDelayTime,\\n        uint256 oldWithrawDelayTime\\n    ) external onlyLockingPool {\\n        emit WithrawDelayTimeChange(newWithrawDelayTime, oldWithrawDelayTime);\\n    }\\n\\n    /**\\n     * @dev logRewardUpdate log event RewardUpdate\\n     */\\n    function logRewardUpdate(\\n        uint256 newReward,\\n        uint256 oldReward\\n    ) external onlyLockingPool {\\n        emit RewardUpdate(newReward, oldReward);\\n    }\\n\\n    /**\\n     * @dev logLockUpdate log event LockUpdate\\n     */\\n    function logLockUpdate(\\n        uint256 sequencerId,\\n        uint256 totalLock\\n    ) external onlyLockingPool {\\n        sequencerNonce[sequencerId] = sequencerNonce[sequencerId] + 1;\\n        emit LockUpdate(sequencerId, sequencerNonce[sequencerId], totalLock);\\n    }\\n\\n    /**\\n     * @dev logClaimRewards log event ClaimRewards\\n     */\\n    function logClaimRewards(\\n        uint256 sequencerId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 totalAmount\\n    ) external onlyLockingPool {\\n        emit ClaimRewards(sequencerId, recipient, amount, totalAmount);\\n    }\\n\\n    /**\\n     * @dev logBatchSubmitReward log event BatchSubmitReward\\n     */\\n    function logBatchSubmitReward(uint256 newBatchId) external onlyLockingPool {\\n        emit BatchSubmitReward(newBatchId);\\n    }\\n\\n    /**\\n     * @dev logUpdateEpochLength log event UpdateEpochLength\\n     */\\n    function logUpdateEpochLength(\\n        uint256 oldEpochLength,\\n        uint256 newEpochLength,\\n        uint256 effectiveBatch\\n    ) external onlyLockingPool {\\n        emit UpdateEpochLength(oldEpochLength, newEpochLength, effectiveBatch);\\n    }\\n}\\n\",\"keccak256\":\"0xc5b00c5e95d5eca12ef55c2d7a3200d81d88bb197e3122b9df84f776ff98e7c6\",\"license\":\"MIT\"},\"contracts/LockingNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ERC721Enumerable, ERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LockingNFT is ERC721Enumerable, Ownable {\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\\n        require(bytes(name).length > 0, \\\"invalid name\\\");\\n        require(bytes(symbol).length > 0, \\\"invalid symbol\\\");\\n    }\\n\\n    /**\\n     * @dev mint a NFT, on behalf of the user successfully applied to become a sequencer\\n     * @param to the signer address of sequencer\\n     * @param tokenId mint token id\\n     */\\n    function mint(address to, uint256 tokenId) external onlyOwner {\\n        require(\\n            balanceOf(to) == 0,\\n            \\\"Sequencers MUST NOT own multiple lock position\\\"\\n        );\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev burn a NFT, give up the sequencer role on behalf of the user\\n     * @param tokenId the NFT token id\\n     */\\n    function burn(uint256 tokenId) external onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override onlyOwner {\\n        require(\\n            balanceOf(to) == 0,\\n            \\\"Sequencers MUST NOT own multiple lock position\\\"\\n        );\\n        super._transfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x4d86fcb34fb6061fa2960eaa8480ef339fbcd85c080076d88bf0c4fb7d2ea544\",\"license\":\"MIT\"},\"contracts/LockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ILockingPool} from \\\"./interfaces/ILockingPool.sol\\\";\\nimport {LockingInfo} from \\\"./LockingInfo.sol\\\";\\nimport {LockingNFT} from \\\"./LockingNFT.sol\\\";\\nimport {IL1ERC20Bridge} from \\\"./interfaces/IL1ERC20Bridge.sol\\\";\\n\\ncontract LockingPool is ILockingPool, OwnableUpgradeable, PausableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Unlocked\\n    } // Unlocked means sequencer exist\\n\\n    struct MpcHistoryItem {\\n        uint256 startBlock;\\n        address newMpcAddress;\\n    }\\n\\n    struct State {\\n        uint256 amount;\\n        uint256 lockerCount;\\n    }\\n\\n    struct StateChange {\\n        int256 amount;\\n        int256 lockerCount;\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current lock amount\\n        uint256 reward; // sequencer current reward\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // sequencer unlock lock amount timestamp, has a withdraw delay time\\n        address signer; // sequencer signer address\\n        address rewardRecipient; // seqeuncer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    uint256 internal constant INCORRECT_SEQUENCER_ID = 2 ** 256 - 1;\\n\\n    address public bridge; // L1 metis bridge address\\n    address public l1Token; // L1 metis token address\\n    address public l2Token; // L2 metis token address\\n    LockingInfo public logger; // logger lockingPool event\\n    LockingNFT public NFTContract; // NFT for locker\\n    uint256 public WITHDRAWAL_DELAY; // delay time for unlock\\n    uint256 public currentBatch; // current batch id\\n    uint256 public totalLocked; // total locked amount of all sequencers\\n    uint256 public NFTCounter; // current nft holder count\\n    uint256 public totalRewardsLiquidated; // total rewards had been liquidated\\n    address[] public signers; // all signers\\n    uint256 public currentUnlockedInit; // sequencer unlock queue count, need have a limit\\n    uint256 public lastRewardEpochId; // the last epochId for update reward\\n    uint256 public lastRewardTime; // the last reward time for update reward\\n\\n    // genesis variables\\n    uint256 public perSecondReward; // reward per second\\n    uint256 public minLock; // min lock Metis token\\n    uint256 public maxLock; // max lock Metis token\\n    uint256 public signerUpdateLimit; // sequencer signer need have a update limit,how many batches are not allowed to update the signer\\n    address public mpcAddress; // current mpc address for batch submit reward\\n    uint256 public sequencerThreshold; // maximum sequencer limit\\n\\n    mapping(uint256 => Sequencer) public sequencers;\\n    mapping(address => uint256) public signerToSequencer;\\n    mapping(uint256 => bool) public batchSubmitHistory; // batch submit\\n\\n    // current Batch lock power and lockers count\\n    State public sequencerState;\\n    mapping(uint256 => StateChange) public sequencerStateChanges;\\n\\n    // sequencerId to last signer update Batch\\n    mapping(uint256 => uint256) public latestSignerUpdateBatch;\\n\\n    // white address list who can lock token\\n    mapping(address => bool) public whiteListAddresses;\\n    // A whitelist address can only be bound to one sequencer\\n    mapping(address => address) public whiteListBoundSequencer;\\n\\n    // mpc history\\n    MpcHistoryItem[] public mpcHistory; // recent mpc\\n\\n    uint256 public l2ChainId; // the l2 chainId\\n\\n    /**\\n     * @dev Emitted when nft contract update in 'UpdateLockingInfo'\\n     * @param _newLockingInfo new contract address.\\n     */\\n    event UpdateLockingInfo(address _newLockingInfo);\\n    /**\\n     * @dev Emitted when nft contract update in 'UpdateNFTContract'\\n     * @param _newNftContract new contract address.\\n     */\\n    event UpdateNFTContract(address _newNftContract);\\n\\n    /**\\n     * @dev Emitted when current batch update in 'SetCurrentBatch'\\n     * @param _newCurrentBatch new batch id.\\n     */\\n    event SetCurrentBatch(uint256 _newCurrentBatch);\\n\\n    /**\\n     * @dev Emitted when signer update limit update in 'UpdateSignerUpdateLimit'\\n     * @param _newLimit new limit.\\n     */\\n    event UpdateSignerUpdateLimit(uint256 _newLimit);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event UpdateMinAmounts(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event UpdateMaxAmounts(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when mpc address update in 'UpdateMpc'\\n     * @param _newMpc new min lock.\\n     */\\n    event UpdateMpc(address _newMpc);\\n\\n    /**\\n     * @dev Emitted when white address update in 'setWhiteListAddress'\\n     * @param user the address who can lock token\\n     * @param verified white address state\\n     */\\n    event WhiteListAdded(address user, bool verified);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param sequencerId the sequencerId\\n     * @param recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(\\n        uint256 sequencerId,\\n        address recipient\\n    );\\n\\n    function initialize(\\n        address _bridge,\\n        address _l1Token,\\n        address _l2Token,\\n        address _NFTContract,\\n        address _mpc,\\n        uint256 _l2ChainId\\n    ) external initializer {\\n        require(_bridge != address(0), \\\"invalid _bridge\\\");\\n        require(_l1Token != address(0), \\\"invalid _l1Token\\\");\\n        require(_l2Token != address(0), \\\"invalid _l2Token\\\");\\n        require(_NFTContract != address(0), \\\"invalid _NFTContract\\\");\\n        require(_mpc != address(0), \\\"_mpc is zero address\\\");\\n\\n        bridge = _bridge;\\n        l1Token = _l1Token;\\n        l2Token = _l2Token;\\n        NFTContract = LockingNFT(_NFTContract);\\n\\n        require(!isContract(_mpc), \\\"_mpc is a contract\\\");\\n        mpcAddress = _mpc;\\n\\n        mpcHistory.push(\\n            MpcHistoryItem({startBlock: block.number, newMpcAddress: _mpc})\\n        );\\n\\n        WITHDRAWAL_DELAY = 21 days; // sequencer exit withdraw delay time\\n        currentBatch = 1; // default start from batch 1\\n        perSecondReward = 1 * (10 ** 8); // per second reward\\n        minLock = 20000 * (10 ** 18); // min lock amount\\n        maxLock = 100000 * (10 ** 18); // max lock amount\\n        signerUpdateLimit = 10; // how many batches are not allowed to update the signer\\n        sequencerThreshold = 10; // allow max sequencers\\n        NFTCounter = 1; // sequencer id\\n\\n        l2ChainId = _l2ChainId; // the l2 chainId\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /**\\n        Admin Methods\\n     */\\n\\n    /**\\n     * @dev forceUnlock Allow owner to force a sequencer node to exit\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function forceUnlock(uint256 sequencerId, uint32 l2Gas) external onlyOwner {\\n        Status status = sequencers[sequencerId].status;\\n        require(\\n            sequencers[sequencerId].activationBatch > 0 &&\\n                sequencers[sequencerId].deactivationBatch == 0 &&\\n                status == Status.Active,\\n            \\\"invalid sequencer status\\\"\\n        );\\n        _unlock(sequencerId, currentBatch, true, l2Gas);\\n    }\\n\\n    /**\\n     * @dev updateNFTContract Allow owner update the NFT contract address\\n     * @param _nftContract new NFT contract address\\n     */\\n    function updateNFTContract(address _nftContract) external onlyOwner {\\n        require(_nftContract != address(0), \\\"invalid _nftContract\\\");\\n        NFTContract = LockingNFT(_nftContract);\\n        emit UpdateNFTContract(_nftContract);\\n    }\\n\\n    /**\\n     * @dev updateLockingInfo Allow owner update the locking info contract address\\n     * @param _lockingInfo new locking info contract address\\n     */\\n    function updateLockingInfo(address _lockingInfo) external onlyOwner {\\n        require(_lockingInfo != address(0), \\\"invalid _lockingInfo\\\");\\n        logger = LockingInfo(_lockingInfo);\\n        emit UpdateLockingInfo(_lockingInfo);\\n    }\\n\\n    /**\\n     * @dev updateSequencerThreshold  Allow owner to set max sequencer threshold\\n     * @param newThreshold the new threshold\\n     */\\n    function updateSequencerThreshold(uint256 newThreshold) external onlyOwner {\\n        require(newThreshold != 0, \\\"invalid newThreshold\\\");\\n        sequencerThreshold = newThreshold;\\n        logger.logThresholdChange(newThreshold, sequencerThreshold);\\n    }\\n\\n    /**\\n     * @dev updatePerSecondReward  Allow owner to set per block reward\\n     * @param newReward the new reward\\n     */\\n    function updatePerSecondReward(uint256 newReward) external onlyOwner {\\n        require(newReward != 0, \\\"invalid newReward\\\");\\n        perSecondReward = newReward;\\n        logger.logRewardUpdate(newReward, perSecondReward);\\n    }\\n\\n    /**\\n     *  @dev updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.\\n     *  @param newWithdrawDelayTime new withdraw delay time\\n     */\\n    function updateWithdrawDelayTimeValue(\\n        uint256 newWithdrawDelayTime\\n    ) external onlyOwner {\\n        require(newWithdrawDelayTime > 0, \\\"invalid newWithdrawDelayTime\\\");\\n        WITHDRAWAL_DELAY = newWithdrawDelayTime;\\n        logger.logWithrawDelayTimeChange(\\n            newWithdrawDelayTime,\\n            WITHDRAWAL_DELAY\\n        );\\n    }\\n\\n    /**\\n     * @dev updateSignerUpdateLimit Allow owner to set signer update max limit\\n     * @param _limit new limit\\n     */\\n    function updateSignerUpdateLimit(uint256 _limit) external onlyOwner {\\n        require(_limit > 0, \\\"invalid _limit\\\");\\n        signerUpdateLimit = _limit;\\n        emit UpdateSignerUpdateLimit(_limit);\\n    }\\n\\n    /**\\n     * @dev updateMinAmounts Allow owner to update min lock amount\\n     * @param _minLock new min lock amount\\n     */\\n    function updateMinAmounts(uint256 _minLock) external onlyOwner {\\n        require(_minLock > 0, \\\"invalid _minLock\\\");\\n        minLock = _minLock;\\n        emit UpdateMinAmounts(_minLock);\\n    }\\n\\n    /**\\n     * @dev updateMaxAmounts Allow owner to update max lock amount\\n     * @param _maxLock new max lock amount\\n     */\\n    function updateMaxAmounts(uint256 _maxLock) external onlyOwner {\\n        require(_maxLock > 0, \\\"invalid _maxLock\\\");\\n        maxLock = _maxLock;\\n        emit UpdateMaxAmounts(_maxLock);\\n    }\\n\\n    /**\\n     * @dev updateMpc Allow owner to update new mpc address\\n     * @param _newMpc new mpc\\n     */\\n    function updateMpc(address _newMpc) external onlyOwner {\\n        require(!isContract(_newMpc), \\\"_newMpc is a contract\\\");\\n        require(_newMpc != address(0), \\\"_newMpc is zero address\\\");\\n        mpcAddress = _newMpc;\\n        mpcHistory.push(\\n            MpcHistoryItem({startBlock: block.number, newMpcAddress: _newMpc})\\n        );\\n\\n        emit UpdateMpc(_newMpc);\\n    }\\n\\n    /**\\n     * @dev setWhiteListAddress Allow owner to update white address list\\n     * @param user the address who can lock token\\n     * @param verified white address state\\n     */\\n    function setWhiteListAddress(\\n        address user,\\n        bool verified\\n    ) external onlyOwner {\\n        require(whiteListAddresses[user] != verified, \\\"state not change\\\");\\n        whiteListAddresses[user] = verified;\\n\\n        emit WhiteListAdded(user, verified);\\n    }\\n\\n    /**\\n     * @dev setPause can set the contract not suspended status\\n     */\\n    function setPause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev setUnpause can cancel the suspended state\\n     */\\n    function setUnpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev lockFor is used to lock Metis and participate in the sequencer block node application\\n     * @param user sequencer signer address\\n     * @param amount Amount of L1 metis token to lock for.\\n     * @param signerPubkey sequencer signer pubkey\\n     */\\n    function lockFor(\\n        address user,\\n        uint256 amount,\\n        bytes memory signerPubkey\\n    ) external override whenNotPaused {\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            currentSequencerSetSize() < sequencerThreshold,\\n            \\\"no more slots\\\"\\n        );\\n        require(amount >= minLock, \\\"amount less than minLock\\\");\\n        require(amount <= maxLock, \\\"amount large than maxLock\\\");\\n        require(\\n            whiteListBoundSequencer[msg.sender] == address(0),\\n            \\\"had bound sequencer\\\"\\n        );\\n\\n        _lockFor(user, amount, signerPubkey);\\n        whiteListBoundSequencer[msg.sender] = user;\\n        _transferTokenFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @dev unlock is used to unlock Metis and exit the sequencer node\\n     *\\n     * @param sequencerId sequencer id\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function unlock(\\n        uint256 sequencerId,\\n        uint32 l2Gas\\n    ) external payable override {\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            whiteListBoundSequencer[msg.sender] ==\\n                sequencers[sequencerId].signer,\\n            \\\"whiteAddress and boundSequencer mismatch\\\"\\n        );\\n        require(\\n            sequencers[sequencerId].rewardRecipient != address(0),\\n            \\\"rewardRecipient not set\\\"\\n        );\\n\\n        Status status = sequencers[sequencerId].status;\\n        require(\\n            sequencers[sequencerId].activationBatch > 0 &&\\n                sequencers[sequencerId].deactivationBatch == 0 &&\\n                status == Status.Active,\\n            \\\"invalid sequencer status\\\"\\n        );\\n\\n        uint256 exitBatch = currentBatch + 1; // notice period\\n        _unlock(sequencerId, exitBatch, false, l2Gas);\\n    }\\n\\n    /**\\n     * @dev unlockClaim Because unlock has a waiting period, after the waiting period is over, you can claim locked tokens\\n     *\\n     * @param sequencerId sequencer id\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function unlockClaim(\\n        uint256 sequencerId,\\n        uint32 l2Gas\\n    ) external payable override {\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            whiteListBoundSequencer[msg.sender] ==\\n                sequencers[sequencerId].signer,\\n            \\\"whiteAddress and boundSequencer mismatch\\\"\\n        );\\n        require(\\n            sequencers[sequencerId].rewardRecipient != address(0),\\n            \\\"rewardRecipient not set\\\"\\n        );\\n\\n        uint256 deactivationBatch = sequencers[sequencerId].deactivationBatch;\\n        uint256 unlockClaimTime = sequencers[sequencerId].unlockClaimTime;\\n\\n        // can only claim after WITHDRAWAL_DELAY\\n        require(\\n            deactivationBatch > 0 &&\\n                unlockClaimTime <= block.timestamp &&\\n                sequencers[sequencerId].status != Status.Unlocked,\\n            \\\"claim not allowed\\\"\\n        );\\n\\n        uint256 amount = sequencers[sequencerId].amount;\\n        uint256 newTotalLocked = totalLocked - amount;\\n        totalLocked = newTotalLocked;\\n\\n        // Check for unclaimed rewards\\n        _liquidateRewards(\\n            sequencerId,\\n            sequencers[sequencerId].rewardRecipient,\\n            l2Gas\\n        );\\n\\n        sequencers[sequencerId].amount = 0;\\n        sequencers[sequencerId].signer = address(0);\\n\\n        signerToSequencer[\\n            sequencers[sequencerId].signer\\n        ] = INCORRECT_SEQUENCER_ID;\\n        sequencers[sequencerId].status = Status.Unlocked;\\n\\n        // Reduce the number of unlockInit queue\\n        currentUnlockedInit--;\\n\\n        // withdraw locked token\\n        _transferToken(msg.sender, amount);\\n\\n        logger.logUnlocked(msg.sender, sequencerId, amount, newTotalLocked);\\n        NFTContract.burn(sequencerId);\\n    }\\n\\n    /**\\n     * @dev relock Allow sequencer to increase the amount of locked positions\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount Amount of L1 metis token to relock for.\\n     * @param lockRewards Whether to lock the current rewards\\n     */\\n    function relock(\\n        uint256 sequencerId,\\n        uint256 amount,\\n        bool lockRewards\\n    ) external override whenNotPaused {\\n        require(\\n            sequencers[sequencerId].amount > 0,\\n            \\\"invalid sequencer locked amount\\\"\\n        );\\n        require(sequencers[sequencerId].deactivationBatch == 0, \\\"no relocking\\\");\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            whiteListBoundSequencer[msg.sender] ==\\n                sequencers[sequencerId].signer,\\n            \\\"whiteAddress and boundSequencer mismatch\\\"\\n        );\\n\\n        uint256 relockAmount = amount;\\n\\n        if (lockRewards) {\\n            amount = amount + sequencers[sequencerId].reward;\\n            sequencers[sequencerId].reward = 0;\\n        }\\n        require(amount > 0, \\\"invalid relock amount\\\");\\n\\n        uint256 newTotalLocked = totalLocked + amount;\\n        totalLocked = newTotalLocked;\\n        sequencers[sequencerId].amount =\\n            sequencers[sequencerId].amount +\\n            amount;\\n        require(\\n            sequencers[sequencerId].amount <= maxLock,\\n            \\\"amount large than maxLock\\\"\\n        );\\n\\n        updateTimeline(int256(amount), 0, 0);\\n        _transferTokenFrom(msg.sender, address(this), relockAmount);\\n\\n        logger.logLockUpdate(sequencerId, sequencers[sequencerId].amount);\\n        logger.logRelockd(\\n            sequencerId,\\n            sequencers[sequencerId].amount,\\n            newTotalLocked\\n        );\\n    }\\n\\n    /**\\n     * @dev withdrawRewards withdraw current rewards\\n     *\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function withdrawRewards(\\n        uint256 sequencerId,\\n        uint32 l2Gas\\n    ) external payable override {\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            whiteListBoundSequencer[msg.sender] ==\\n                sequencers[sequencerId].signer,\\n            \\\"whiteAddress and boundSequencer mismatch\\\"\\n        );\\n\\n        Sequencer storage sequencerInfo = sequencers[sequencerId];\\n        _liquidateRewards(sequencerId, sequencerInfo.rewardRecipient, l2Gas);\\n    }\\n\\n    /**\\n     * @dev updateSigner Allow sqeuencer to update new signers to replace old signer addresses\\uff0cand NFT holder will be transfer driectly\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param signerPubkey the new signer pubkey address\\n     */\\n    function updateSigner(\\n        uint256 sequencerId,\\n        bytes memory signerPubkey\\n    ) external {\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            whiteListBoundSequencer[msg.sender] ==\\n                sequencers[sequencerId].signer,\\n            \\\"whiteAddress and boundSequencer mismatch\\\"\\n        );\\n        require(\\n            sequencers[sequencerId].deactivationBatch == 0,\\n            \\\"exited sequencer\\\"\\n        );\\n\\n        address signer = _getAndAssertSigner(signerPubkey);\\n        uint256 _currentBatch = currentBatch;\\n        require(\\n            _currentBatch >=\\n                latestSignerUpdateBatch[sequencerId] + signerUpdateLimit,\\n            \\\"not allowed\\\"\\n        );\\n\\n        address currentSigner = sequencers[sequencerId].signer;\\n        // update signer event\\n        logger.logSignerChange(\\n            sequencerId,\\n            currentSigner,\\n            signer,\\n            signerPubkey\\n        );\\n\\n        // swap signer in the list\\n        _removeSigner(currentSigner);\\n        _insertSigner(signer);\\n\\n        signerToSequencer[currentSigner] = INCORRECT_SEQUENCER_ID;\\n        signerToSequencer[signer] = sequencerId;\\n        sequencers[sequencerId].signer = signer;\\n        whiteListBoundSequencer[msg.sender] = signer;\\n\\n        // reset update time to current time\\n        latestSignerUpdateBatch[sequencerId] = _currentBatch;\\n\\n        // transfer NFT driectly\\n        NFTContract.transferFrom(msg.sender, signer, sequencerId);\\n    }\\n\\n    /**\\n     * @dev batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution\\n     * @param batchId The batchId that submitted the reward is that\\n     * @param payeer Who Pays the Reward Tokens\\n     * @param startEpoch The startEpoch that submitted the reward is that\\n     * @param endEpoch The endEpoch that submitted the reward is that\\n     * @param _sequencers Those sequencers can receive rewards\\n     * @param finishedBlocks How many blocks each sequencer finished.\\n     * @param signature Confirmed by mpc and signed for reward distribution\\n     */\\n    function batchSubmitRewards(\\n        uint256 batchId,\\n        address payeer,\\n        uint256 startEpoch,\\n        uint256 endEpoch,\\n        address[] memory _sequencers,\\n        uint256[] memory finishedBlocks,\\n        bytes memory signature\\n    ) external payable returns (uint256) {\\n        uint256 nextBatch = currentBatch + 1;\\n        require(nextBatch == batchId, \\\"invalid batch id\\\");\\n        require(_sequencers.length == finishedBlocks.length, \\\"mismatch length\\\");\\n        require(lastRewardEpochId < startEpoch, \\\"invalid startEpoch\\\");\\n        require(startEpoch < endEpoch, \\\"invalid endEpoch\\\");\\n\\n        lastRewardEpochId = endEpoch;\\n        // check mpc signature\\n        bytes32 operationHash = keccak256(\\n            abi.encodePacked(\\n                block.chainid,\\n                batchId,\\n                startEpoch,\\n                endEpoch,\\n                _sequencers,\\n                finishedBlocks,\\n                address(this)\\n            )\\n        );\\n        operationHash = ECDSA.toEthSignedMessageHash(operationHash);\\n        address signer = ECDSA.recover(operationHash, signature);\\n        require(signer == mpcAddress, \\\"invalid mpc signature\\\");\\n\\n        // calc total reward\\n        uint256 totalReward = perSecondReward *\\n            (block.timestamp - lastRewardTime);\\n        lastRewardTime = block.timestamp;\\n\\n        // calc total finished blocks\\n        uint256 totalFinishedBlocks;\\n        for (uint256 i = 0; i < finishedBlocks.length; ) {\\n            unchecked {\\n                totalFinishedBlocks += finishedBlocks[i];\\n                ++i;\\n            }\\n        }\\n\\n        // distribute reward\\n        for (uint256 i = 0; i < _sequencers.length; ) {\\n            require(\\n                signerToSequencer[_sequencers[i]] > 0,\\n                \\\"sequencer not exist\\\"\\n            );\\n            require(\\n                isSequencer(signerToSequencer[_sequencers[i]]),\\n                \\\"invalid sequencer\\\"\\n            );\\n\\n            uint256 reward = _calculateReward(\\n                totalReward,\\n                totalFinishedBlocks,\\n                finishedBlocks[i]\\n            );\\n            _increaseReward(_sequencers[i], reward);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _finalizeCommit();\\n        logger.logBatchSubmitReward(batchId);\\n\\n        // reward income\\n        IERC20(l1Token).safeTransferFrom(payeer, address(this), totalReward);\\n        return totalReward;\\n    }\\n\\n    /**\\n     * @dev setSequencerRewardRecipient Allow sequencer owner to set a reward recipient\\n     * @param sequencerId The sequencerId\\n     * @param recipient Who will receive the reward token\\n     */\\n    function setSequencerRewardRecipient(\\n        uint256 sequencerId,\\n        address recipient\\n    ) external {\\n        require(\\n            whiteListAddresses[msg.sender],\\n            \\\"msg sender should be in the white list\\\"\\n        );\\n        require(\\n            whiteListBoundSequencer[msg.sender] ==\\n                sequencers[sequencerId].signer,\\n            \\\"whiteAddress and boundSequencer mismatch\\\"\\n        );\\n        require(recipient != address(0), \\\"invalid recipient\\\");\\n\\n        Sequencer storage sequencerInfo = sequencers[sequencerId];\\n        sequencerInfo.rewardRecipient = recipient;\\n\\n        emit SequencerRewardRecipientChanged(sequencerId, recipient);\\n    }\\n\\n    // query owenr by NFT token id\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return NFTContract.ownerOf(tokenId);\\n    }\\n\\n    // query current lock amount by sequencer id\\n    function sequencerLock(\\n        uint256 sequencerId\\n    ) external view override returns (uint256) {\\n        return sequencers[sequencerId].amount;\\n    }\\n\\n    // get sequencer id by address\\n    function getSequencerId(\\n        address user\\n    ) external view override returns (uint256) {\\n        return NFTContract.tokenOfOwnerByIndex(user, 0);\\n    }\\n\\n    //  get sequencer reward by sequencer id\\n    function sequencerReward(\\n        uint256 sequencerId\\n    ) external view override returns (uint256) {\\n        return sequencers[sequencerId].reward;\\n    }\\n\\n    // get total lock amount for all sequencers\\n    function currentSequencerSetTotalLock()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return sequencerState.amount;\\n    }\\n\\n    /**\\n     * @dev fetchMpcAddress query mpc address by L1 block height, used by batch-submitter\\n     * @param blockHeight the L1 block height\\n     */\\n    function fetchMpcAddress(\\n        uint256 blockHeight\\n    ) external view override returns (address) {\\n        address result;\\n        for (uint256 i = mpcHistory.length - 1; i >= 0; i--) {\\n            if (blockHeight >= mpcHistory[i].startBlock) {\\n                result = mpcHistory[i].newMpcAddress;\\n                break;\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    /*\\n        public functions\\n    */\\n\\n    // query whether an id is a sequencer\\n    function isSequencer(uint256 sequencerId) public view returns (bool) {\\n        return\\n            _isSequencer(\\n                sequencers[sequencerId].status,\\n                sequencers[sequencerId].amount,\\n                sequencers[sequencerId].deactivationBatch,\\n                currentBatch\\n            );\\n    }\\n\\n    // get all sequencer count\\n    function currentSequencerSetSize() public view override returns (uint256) {\\n        return sequencerState.lockerCount;\\n    }\\n\\n    /*\\n        internal functions\\n    */\\n\\n    /**\\n     * @dev updateTimeline Used to update sequencerState information\\n     * @param amount The number of locked positions changed\\n     * @param lockerCount The number of lock sequencer changed\\n     * @param targetBatch When does the change take effect\\n     */\\n    function updateTimeline(\\n        int256 amount,\\n        int256 lockerCount,\\n        uint256 targetBatch\\n    ) internal {\\n        if (targetBatch == 0) {\\n            // update total lock and sequencer count\\n            if (amount > 0) {\\n                sequencerState.amount = sequencerState.amount + uint256(amount);\\n            } else if (amount < 0) {\\n                sequencerState.amount =\\n                    sequencerState.amount -\\n                    uint256(amount * -1);\\n            }\\n\\n            if (lockerCount > 0) {\\n                sequencerState.lockerCount =\\n                    sequencerState.lockerCount +\\n                    uint256(lockerCount);\\n            } else if (lockerCount < 0) {\\n                sequencerState.lockerCount =\\n                    sequencerState.lockerCount -\\n                    uint256(lockerCount * -1);\\n            }\\n        } else {\\n            sequencerStateChanges[targetBatch].amount += amount;\\n            sequencerStateChanges[targetBatch].lockerCount += lockerCount;\\n        }\\n    }\\n\\n    function _lockFor(\\n        address user,\\n        uint256 amount,\\n        bytes memory signerPubkey\\n    ) internal returns (uint256) {\\n        address signer = _getAndAssertSigner(signerPubkey);\\n        require(user == signer, \\\"user and signerPubkey mismatch\\\");\\n\\n        uint256 _currentBatch = currentBatch;\\n        uint256 sequencerId = NFTCounter;\\n\\n        uint256 newTotalLocked = totalLocked + amount;\\n        totalLocked = newTotalLocked;\\n\\n        sequencers[sequencerId] = Sequencer({\\n            reward: 0,\\n            amount: amount,\\n            activationBatch: _currentBatch,\\n            deactivationBatch: 0,\\n            deactivationTime: 0,\\n            unlockClaimTime: 0,\\n            signer: signer,\\n            rewardRecipient: address(0),\\n            status: Status.Active\\n        });\\n\\n        latestSignerUpdateBatch[sequencerId] = _currentBatch;\\n\\n        signerToSequencer[signer] = sequencerId;\\n        updateTimeline(int256(amount), 1, 0);\\n        NFTCounter = sequencerId + 1;\\n        _insertSigner(signer);\\n\\n        logger.logLocked(\\n            signer,\\n            signerPubkey,\\n            sequencerId,\\n            _currentBatch,\\n            amount,\\n            newTotalLocked\\n        );\\n        NFTContract.mint(user, sequencerId);\\n        return sequencerId;\\n    }\\n\\n    // The function restricts the sequencer's exit if the number of total locked sequencers divided by 3 is less than the number of\\n    // sequencers that have already exited. This would effectively freeze the sequencer's unlock function until a sufficient number of\\n    // new sequencers join the system.\\n    function _unlock(\\n        uint256 sequencerId,\\n        uint256 exitBatch,\\n        bool force,\\n        uint32 l2Gas\\n    ) internal {\\n        if (!force) {\\n            // Ensure that the number of exit sequencer is less than 1/3 of the total\\n            require(\\n                currentUnlockedInit + 1 <= sequencerState.lockerCount / 3,\\n                \\\"unlock not allowed\\\"\\n            );\\n        }\\n\\n        uint256 amount = sequencers[sequencerId].amount;\\n        address sequencer = NFTContract.ownerOf(sequencerId);\\n\\n        sequencers[sequencerId].status = Status.Inactive;\\n        sequencers[sequencerId].deactivationBatch = exitBatch;\\n        sequencers[sequencerId].deactivationTime = block.timestamp;\\n        sequencers[sequencerId].unlockClaimTime =\\n            block.timestamp +\\n            WITHDRAWAL_DELAY;\\n\\n        uint256 targetBatch = exitBatch <= currentBatch ? 0 : exitBatch;\\n        updateTimeline(-(int256(amount)), -1, targetBatch);\\n\\n        currentUnlockedInit++;\\n\\n        _removeSigner(sequencers[sequencerId].signer);\\n        _liquidateRewards(\\n            sequencerId,\\n            sequencers[sequencerId].rewardRecipient,\\n            l2Gas\\n        );\\n\\n        logger.logUnlockInit(\\n            sequencer,\\n            sequencerId,\\n            exitBatch,\\n            sequencers[sequencerId].deactivationTime,\\n            sequencers[sequencerId].unlockClaimTime,\\n            amount\\n        );\\n    }\\n\\n    function _finalizeCommit() internal {\\n        uint256 nextBatch = currentBatch + 1;\\n        batchSubmitHistory[nextBatch] = true;\\n\\n        StateChange memory changes = sequencerStateChanges[nextBatch];\\n        updateTimeline(changes.amount, changes.lockerCount, 0);\\n\\n        delete sequencerStateChanges[currentBatch];\\n\\n        currentBatch = nextBatch;\\n    }\\n\\n    function _insertSigner(address newSigner) internal {\\n        signers.push(newSigner);\\n\\n        uint256 lastIndex = signers.length - 1;\\n        uint256 i = lastIndex;\\n        for (; i > 0; --i) {\\n            address signer = signers[i - 1];\\n            if (signer < newSigner) {\\n                break;\\n            }\\n            signers[i] = signer;\\n        }\\n\\n        if (i != lastIndex) {\\n            signers[i] = newSigner;\\n        }\\n    }\\n\\n    function _removeSigner(address signerToDelete) internal {\\n        uint256 totalSigners = signers.length;\\n        for (uint256 i = 0; i < totalSigners; i++) {\\n            if (signers[i] == signerToDelete) {\\n                signers[i] = signers[totalSigners - 1];\\n                signers.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n        return _target.code.length > 0;\\n    }\\n\\n    function _calculateReward(\\n        uint256 totalRewards,\\n        uint256 totalBlocks,\\n        uint256 finishedBlocks\\n    ) internal pure returns (uint256) {\\n        // rewards are based on BlockInterval multiplied on `perSecondReward`\\n        return totalRewards * (finishedBlocks / totalBlocks);\\n    }\\n\\n    /**\\n        Private Methods\\n     */\\n\\n    function _increaseReward(address sequencer, uint256 reward) private {\\n        uint256 sequencerId = signerToSequencer[sequencer];\\n        // update reward\\n        sequencers[sequencerId].reward += reward;\\n    }\\n\\n    function _liquidateRewards(\\n        uint256 sequencerId,\\n        address recipient,\\n        uint32 l2Gas\\n    ) private {\\n        require(recipient != address(0), \\\"invalid reward recipient\\\");\\n        uint256 reward = sequencers[sequencerId].reward;\\n        totalRewardsLiquidated = totalRewardsLiquidated + reward;\\n        sequencers[sequencerId].reward = 0;\\n\\n        // withdraw reward to L2\\n        IERC20(l1Token).safeIncreaseAllowance(bridge, reward);\\n        IL1ERC20Bridge(bridge).depositERC20ToByChainId{value: msg.value}(\\n            l2ChainId,\\n            l1Token,\\n            l2Token,\\n            recipient,\\n            reward,\\n            l2Gas,\\n            \\\"\\\"\\n        );\\n        logger.logClaimRewards(\\n            sequencerId,\\n            recipient,\\n            reward,\\n            totalRewardsLiquidated\\n        );\\n    }\\n\\n    function _transferToken(address destination, uint256 amount) private {\\n        IERC20(l1Token).safeTransfer(destination, amount);\\n    }\\n\\n    function _transferTokenFrom(\\n        address from,\\n        address destination,\\n        uint256 amount\\n    ) private {\\n        IERC20(l1Token).safeTransferFrom(from, destination, amount);\\n    }\\n\\n    function _getAndAssertSigner(\\n        bytes memory pub\\n    ) private view returns (address) {\\n        require(pub.length == 64, \\\"not pub\\\");\\n        address signer = address(uint160(uint256(keccak256(pub))));\\n        require(\\n            signer != address(0) && signerToSequencer[signer] == 0,\\n            \\\"invalid signer\\\"\\n        );\\n        return signer;\\n    }\\n\\n    function _isSequencer(\\n        Status status,\\n        uint256 amount,\\n        uint256 deactivationBatch,\\n        uint256 _currentBatch\\n    ) private pure returns (bool) {\\n        return (amount > 0 &&\\n            (deactivationBatch == 0 ||\\n                deactivationBatch > _currentBatch ||\\n                status == Status.Active));\\n    }\\n}\\n\",\"keccak256\":\"0xf4c3732d28cd0dc61ae8067296e8fc53c2bf99747809d2feeed793a2d3e7febe\",\"license\":\"MIT\"},\"contracts/interfaces/IL1ERC20Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IL1ERC20Bridge\\n */\\ninterface IL1ERC20Bridge {\\n    /**\\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\\n     * @param _chainid chainid\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20ToByChainId(\\n        uint256 _chainid,\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x29eb55d70c53422ab6d8fc84f87876fc8df43dbb84ab720c3ebe901c9690fa59\",\"license\":\"MIT\"},\"contracts/interfaces/ILockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface ILockingPool {\\n    /**\\n     * @dev lockFor is used to lock Metis and participate in the sequencer block node application\\n     *\\n     * @param signer sequencer signer address\\n     * @param amount Amount of L1 metis token to lock for.\\n     * @param signerPubkey sequencer signer pubkey\\n     */\\n    function lockFor(\\n        address signer,\\n        uint256 amount,\\n        bytes memory signerPubkey\\n    ) external;\\n\\n    /**\\n     * @dev relock Allow sequencer to increase the amount of locked positions\\n     * @param sequencerId sequencer id\\n     * @param amount Amount of L1 metis token to relock for.\\n     * @param lockRewards Whether to lock the current reward\\n     */\\n    function relock(\\n        uint256 sequencerId,\\n        uint256 amount,\\n        bool lockRewards\\n    ) external;\\n\\n    /**\\n     * @dev withdrawRewards withdraw current reward\\n     *\\n     * @param sequencerId sequencer id\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function withdrawRewards(\\n        uint256 sequencerId,\\n        uint32 l2Gas\\n    ) external payable;\\n\\n    /**\\n     * @dev unlock is used to unlock Metis and exit the sequencer node\\n     *\\n     * @param sequencerId sequencer id\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function unlock(uint256 sequencerId, uint32 l2Gas) external payable;\\n\\n    /**\\n     * @dev unlockClaim Because unlock has a waiting period, after the waiting period is over, you can claim locked tokens\\n     *\\n     * @param sequencerId sequencer id\\n     * @param l2Gas bridge reward to L2 gasLimit\\n     */\\n    function unlockClaim(uint256 sequencerId, uint32 l2Gas) external payable;\\n\\n    /**\\n     * @dev ownerOf query owner of the NFT\\n     *\\n     * @param tokenId NFT token id\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev getSequencerId query sequencer id by signer address\\n     *\\n     * @param user sequencer signer address\\n     */\\n    function getSequencerId(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev sequencerReward query sequencer current reward\\n     *\\n     * @param sequencerId sequencerid\\n     */\\n    function sequencerReward(\\n        uint256 sequencerId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev sequencerLock return the total lock amount of sequencer\\n     *\\n     * @param sequencerId sequencer id\\n     */\\n    function sequencerLock(uint256 sequencerId) external view returns (uint256);\\n\\n    /**\\n     * @dev currentSequencerSetSize  get all sequencer count\\n     */\\n    function currentSequencerSetSize() external view returns (uint256);\\n\\n    /**\\n     * @dev currentSequencerSetTotalLock get total lock amount for all sequencers\\n     */\\n    function currentSequencerSetTotalLock() external view returns (uint256);\\n\\n    /**\\n     * @dev fetchMpcAddress query mpc address by L1 block height, used by batch-submitter\\n     * @param blockHeight L1 block height\\n     */\\n    function fetchMpcAddress(\\n        uint256 blockHeight\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xde01e756902768b144a4418de47e15dd74cfd5a1975c69723e6d383d5c8f0958\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506150a1806100206000396000f3fe6080604052600436106103c35760003560e01c8063715018a6116101f2578063c0f00d5a1161010d578063e4a86a99116100a0578063f24ccbfe1161006f578063f24ccbfe14610b88578063f2fde38b14610ba8578063f41a964214610bc8578063f788870c14610be857600080fd5b8063e4a86a9914610b02578063e78cea9214610b22578063ef91cdba14610b42578063f037c63014610b7257600080fd5b8063d431b1ac116100dc578063d431b1ac14610a8a578063d6ae3cd514610a9f578063d83b0e1414610ab5578063ddd1d83014610ad557600080fd5b8063c0f00d5a14610a1e578063ca99e83814610a34578063cd6b838814610a54578063d11d068114610a6a57600080fd5b8063920674dc11610185578063a2512d7911610154578063a2512d791461099b578063af70cba5146109ae578063b3bf1021146109ce578063c01e1bd6146109fe57600080fd5b8063920674dc1461091f5780639231cf741461094f57806395b6ef0c146109655780639ab19a8f1461098557600080fd5b8063848cb5c6116101c1578063848cb5c6146108c45780638da5cb5b146108d95780638ddc74de146108f757806391f1fb731461090a57600080fd5b8063715018a61461085957806371e10cfa1461086e57806376cd940e1461088e57806378627f2b146108a457600080fd5b806333a8545f116102e257806356891412116102755780636352211e116102445780636352211e1461077757806367c7c482146107975780636ba7ccff146107b75780636c0b3e461461084357600080fd5b806356891412146106fc57806356eff267146107125780635aabca4f146107325780635c975abb1461075f57600080fd5b80634b3fbda2116102b15780634b3fbda2146106875780634e3c83f1146106bb578063500d3fc0146106d15780635508d8e1146106e657600080fd5b806333a8545f146105e457806335209ac5146105fa578063387b32dd1461062a5780633e8eef891461065a57600080fd5b806315dcb5cd1161035a5780631f1c6105116103295780631f1c6105146105715780632079fb9a14610591578063262c0e66146105b157806331c2273b146105c457600080fd5b806315dcb5cd1461050857806317396687146105285780631950dd111461053b5780631c7d13a61461055157600080fd5b80631092b047116103965780631092b04714610453578063111f46301461047357806312254b55146104ab57806314e482aa146104e857600080fd5b8063015bb180146103c857806306cfb104146103ea57806307104a241461040a5780630ebb172a1461042a575b600080fd5b3480156103d457600080fd5b506103e86103e336600461483f565b610c1e565b005b3480156103f657600080fd5b506103e8610405366004614878565b61100d565b34801561041657600080fd5b506103e8610425366004614878565b6110a1565b34801561043657600080fd5b50610440609c5481565b6040519081526020015b60405180910390f35b34801561045f57600080fd5b506103e861046e366004614878565b61112e565b34801561047f57600080fd5b5060a954610493906001600160a01b031681565b6040516001600160a01b03909116815260200161044a565b3480156104b757600080fd5b506104cb6104c6366004614878565b6111f4565b604080519283526001600160a01b0390911660208301520161044a565b3480156104f457600080fd5b506103e8610503366004614878565b61122b565b34801561051457600080fd5b50610493610523366004614878565b6112c0565b6103e8610536366004614891565b611355565b34801561054757600080fd5b5061044060aa5481565b34801561055d57600080fd5b5061044061056c3660046148df565b61147c565b34801561057d57600080fd5b506103e861058c366004614878565b6114f8565b34801561059d57600080fd5b506104936105ac366004614878565b611585565b6103e86105bf366004614891565b6115af565b3480156105d057600080fd5b50609b54610493906001600160a01b031681565b3480156105f057600080fd5b5061044060a55481565b34801561060657600080fd5b5061061a610615366004614878565b6117e1565b604051901515815260200161044a565b34801561063657600080fd5b5060ae5460af54610645919082565b6040805192835260208301919091520161044a565b34801561066657600080fd5b506104406106753660046148df565b60ac6020526000908152604090205481565b34801561069357600080fd5b506106456106a2366004614878565b60b0602052600090815260409020805460019091015482565b3480156106c757600080fd5b5061044060a85481565b3480156106dd57600080fd5b5060af54610440565b3480156106f257600080fd5b50610440609f5481565b34801561070857600080fd5b50610440609e5481565b34801561071e57600080fd5b50609954610493906001600160a01b031681565b34801561073e57600080fd5b5061044061074d366004614878565b600090815260ab602052604090205490565b34801561076b57600080fd5b5060655460ff1661061a565b34801561078357600080fd5b50610493610792366004614878565b611816565b3480156107a357600080fd5b506103e86107b23660046148df565b611884565b3480156107c357600080fd5b5061082e6107d2366004614878565b60ab60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b0391821691811690600160a01b900460ff1689565b60405161044a99989796959493929190614919565b34801561084f57600080fd5b5061044060a75481565b34801561086557600080fd5b506103e8611930565b34801561087a57600080fd5b506103e8610889366004614878565b611944565b34801561089a57600080fd5b50610440609d5481565b3480156108b057600080fd5b506103e86108bf3660046148df565b6119d9565b3480156108d057600080fd5b506103e8611a85565b3480156108e557600080fd5b506033546001600160a01b0316610493565b6103e8610905366004614891565b611a95565b34801561091657600080fd5b5060ae54610440565b34801561092b57600080fd5b5061061a61093a3660046148df565b60b26020526000908152604090205460ff1681565b34801561095b57600080fd5b5061044060a45481565b34801561097157600080fd5b506103e861098036600461498f565b611e54565b34801561099157600080fd5b5061044060a25481565b6104406109a9366004614b4e565b6122b7565b3480156109ba57600080fd5b506103e86109c9366004614c66565b612758565b3480156109da57600080fd5b506104406109e9366004614878565b600090815260ab602052604090206001015490565b348015610a0a57600080fd5b50609854610493906001600160a01b031681565b348015610a2a57600080fd5b5061044060a35481565b348015610a4057600080fd5b506103e8610a4f366004614891565b61296a565b348015610a6057600080fd5b5061044060a05481565b348015610a7657600080fd5b506103e8610a853660046148df565b612a2c565b348015610a9657600080fd5b506103e8612bb0565b348015610aab57600080fd5b5061044060b55481565b348015610ac157600080fd5b506103e8610ad0366004614cbf565b612bc0565b348015610ae157600080fd5b50610440610af0366004614878565b60b16020526000908152604090205481565b348015610b0e57600080fd5b506103e8610b1d366004614ce4565b612d7c565b348015610b2e57600080fd5b50609754610493906001600160a01b031681565b348015610b4e57600080fd5b5061061a610b5d366004614878565b60ad6020526000908152604090205460ff1681565b348015610b7e57600080fd5b5061044060a65481565b348015610b9457600080fd5b50609a54610493906001600160a01b031681565b348015610bb457600080fd5b506103e8610bc33660046148df565b612e57565b348015610bd457600080fd5b506103e8610be3366004614d12565b612ee7565b348015610bf457600080fd5b50610493610c033660046148df565b60b3602052600090815260409020546001600160a01b031681565b610c266131f7565b600083815260ab6020526040902054610c865760405162461bcd60e51b815260206004820152601f60248201527f696e76616c69642073657175656e636572206c6f636b656420616d6f756e740060448201526064015b60405180910390fd5b600083815260ab602052604090206003015415610ce55760405162461bcd60e51b815260206004820152600c60248201527f6e6f2072656c6f636b696e6700000000000000000000000000000000000000006044820152606401610c7d565b33600090815260b2602052604090205460ff16610d535760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600083815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614610ddf5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b818115610e1757600084815260ab6020526040902060010154610e029084614d6f565b600085815260ab602052604081206001015592505b60008311610e675760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642072656c6f636b20616d6f756e7400000000000000000000006044820152606401610c7d565b600083609e54610e779190614d6f565b609e819055600086815260ab6020526040902054909150610e99908590614d6f565b600086815260ab6020526040902081905560a7541015610efb5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e74206c61726765207468616e206d61784c6f636b000000000000006044820152606401610c7d565b610f078460008061324a565b610f12333084613326565b609a54600086815260ab6020526040908190205490516307c5c28360e41b81526004810188905260248101919091526001600160a01b0390911690637c5c283090604401600060405180830381600087803b158015610f7057600080fd5b505af1158015610f84573d6000803e3d6000fd5b5050609a54600088815260ab6020526040908190205490516332417e2360e21b8152600481018a90526024810191909152604481018590526001600160a01b03909116925063c905f88c91506064015b600060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050505050505050565b61101561333e565b600081116110655760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964205f6c696d69740000000000000000000000000000000000006044820152606401610c7d565b60a88190556040518181527faa85c21e3ef84a69e2213d37b0df2df818a6ec0252244b4411a956e2293d170f906020015b60405180910390a150565b6110a961333e565b600081116110f95760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6d696e4c6f636b000000000000000000000000000000006044820152606401610c7d565b60a68190556040518181527feaf0654a2bc3f772cd56f5160f2b340c6ab0432789d24b37418c16d13f85ad3490602001611096565b61113661333e565b806000036111865760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206e65775468726573686f6c640000000000000000000000006044820152606401610c7d565b60aa819055609a54604051630f1980a560e41b815260048101839052602481018390526001600160a01b039091169063f1980a50906044015b600060405180830381600087803b1580156111d957600080fd5b505af11580156111ed573d6000803e3d6000fd5b5050505050565b60b4818154811061120457600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b61123361333e565b806000036112835760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964206e65775265776172640000000000000000000000000000006044820152606401610c7d565b60a5819055609a54604051632dbe9d3160e21b815260048101839052602481018390526001600160a01b039091169063b6fa74c4906044016111bf565b6000806000600160b4805490506112d79190614d82565b90505b60b481815481106112ed576112ed614d95565b906000526020600020906002020160000154841061133c5760b4818154811061131857611318614d95565b60009182526020909120600160029092020101546001600160a01b0316915061134e565b8061134681614dab565b9150506112da565b5092915050565b33600090815260b2602052604090205460ff166113c35760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b0390811691161461144f5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab6020526040902060078101546114779084906001600160a01b031684613398565b505050565b609b54604051632f745c5960e01b81526001600160a01b038381166004830152600060248301819052921690632f745c5990604401602060405180830381865afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190614dc2565b92915050565b61150061333e565b600081116115505760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6d61784c6f636b000000000000000000000000000000006044820152606401610c7d565b60a78190556040518181527f8e94bf4c11cd704dc7bfe91bea29d42a0d6c9afa7f76bff08694ef530ae42c2e90602001611096565b60a1818154811061159557600080fd5b6000918252602090912001546001600160a01b0316905081565b33600090815260b2602052604090205460ff1661161d5760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b039081169116146116a95760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab60205260409020600701546001600160a01b03166117105760405162461bcd60e51b815260206004820152601760248201527f726577617264526563697069656e74206e6f74207365740000000000000000006044820152606401610c7d565b600082815260ab602052604090206007810154600290910154600160a01b90910460ff1690158015906117525750600083815260ab6020526040902060030154155b801561176f5750600181600281111561176d5761176d614903565b145b6117bb5760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642073657175656e6365722073746174757300000000000000006044820152606401610c7d565b6000609d5460016117cc9190614d6f565b90506117db8482600086613561565b50505050565b600081815260ab6020526040812060078101548154600390920154609d546114f293600160a01b90930460ff169291906137d3565b609b546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e90602401602060405180830381865afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190614ddb565b61188c61333e565b6001600160a01b0381166118e25760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964205f6c6f636b696e67496e666f0000000000000000000000006044820152606401610c7d565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fa1ac06f5f295091163015710ca4e5ca0303f40e6f3dd6cb99c554d703c0ee7f690602001611096565b61193861333e565b6119426000613812565b565b61194c61333e565b6000811161199c5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e6577576974686472617744656c617954696d65000000006044820152606401610c7d565b609c819055609a546040516343d2b49b60e01b815260048101839052602481018390526001600160a01b03909116906343d2b49b906044016111bf565b6119e161333e565b6001600160a01b038116611a375760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964205f6e6674436f6e74726163740000000000000000000000006044820152606401610c7d565b609b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f6b004b7db7a4ceb691c66bd356de43d2dd8def042c6e4fb8be233e0ced628da590602001611096565b611a8d61333e565b611942613864565b33600090815260b2602052604090205460ff16611b035760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614611b8f5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab60205260409020600701546001600160a01b0316611bf65760405162461bcd60e51b815260206004820152601760248201527f726577617264526563697069656e74206e6f74207365740000000000000000006044820152606401610c7d565b600082815260ab6020526040902060038101546005909101548115801590611c1e5750428111155b8015611c5757506002600085815260ab6020526040902060070154600160a01b900460ff166002811115611c5457611c54614903565b14155b611ca35760405162461bcd60e51b815260206004820152601160248201527f636c61696d206e6f7420616c6c6f7765640000000000000000000000000000006044820152606401610c7d565b600084815260ab6020526040812054609e54909190611cc3908390614d82565b609e819055600087815260ab6020526040902060070154909150611cf29087906001600160a01b031687613398565b600086815260ab602052604081208181556006810180546001600160a01b03191690556000197fcb32a14641dfad80670595f3e53f5dc52441fb5380c11f8eebcd755e5b33a3d955600701805460ff60a01b19167402000000000000000000000000000000000000000017905560a2805491611d6d83614dab565b9190505550611d7c33836138b6565b609a5460405163492b6d4960e11b81523360048201526024810188905260448101849052606481018390526001600160a01b0390911690639256da9290608401600060405180830381600087803b158015611dd657600080fd5b505af1158015611dea573d6000803e3d6000fd5b5050609b54604051630852cd8d60e31b8152600481018a90526001600160a01b0390911692506342966c689150602401600060405180830381600087803b158015611e3457600080fd5b505af1158015611e48573d6000803e3d6000fd5b50505050505050505050565b600054610100900460ff1615808015611e745750600054600160ff909116105b80611e8e5750303b158015611e8e575060005460ff166001145b611f005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c7d565b6000805460ff191660011790558015611f23576000805461ff0019166101001790555b6001600160a01b038716611f795760405162461bcd60e51b815260206004820152600f60248201527f696e76616c6964205f62726964676500000000000000000000000000000000006044820152606401610c7d565b6001600160a01b038616611fcf5760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6c31546f6b656e000000000000000000000000000000006044820152606401610c7d565b6001600160a01b0385166120255760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6c32546f6b656e000000000000000000000000000000006044820152606401610c7d565b6001600160a01b03841661207b5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964205f4e4654436f6e74726163740000000000000000000000006044820152606401610c7d565b6001600160a01b0383166120d15760405162461bcd60e51b815260206004820152601460248201527f5f6d7063206973207a65726f20616464726573730000000000000000000000006044820152606401610c7d565b609780546001600160a01b03808a166001600160a01b0319928316179092556098805489841690831617905560998054888416908316179055609b805492871692909116919091179055612124836138d1565b156121715760405162461bcd60e51b815260206004820152601260248201527f5f6d7063206973206120636f6e747261637400000000000000000000000000006044820152606401610c7d565b60a980546001600160a01b03199081166001600160a01b03868116918217909355604080518082019091524381526020810191825260b480546001818101835560009290925291517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c50360029093029283015591517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c50490910180549093169316929092179055621baf80609c55609d8190556305f5e10060a55569043c33c193756480000060a65569152d02c7e14af680000060a755600a60a881905560aa55609f5560b58290556122606138f9565b61226861396c565b80156122ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600080609d5460016122c99190614d6f565b905088811461231a5760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964206261746368206964000000000000000000000000000000006044820152606401610c7d565b835185511461236b5760405162461bcd60e51b815260206004820152600f60248201527f6d69736d61746368206c656e67746800000000000000000000000000000000006044820152606401610c7d565b8660a354106123bc5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420737461727445706f636800000000000000000000000000006044820152606401610c7d565b85871061240b5760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420656e6445706f6368000000000000000000000000000000006044820152606401610c7d565b60a38690556040516000906124309046908c908b908b908b908b903090602001614df8565b60405160208183030381529060405280519060200120905061247f817f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b9050600061248d82866139df565b60a9549091506001600160a01b038083169116146124ed5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206d7063207369676e617475726500000000000000000000006044820152606401610c7d565b600060a454426124fd9190614d82565b60a55461250a9190614e99565b4260a45590506000805b88518110156125465788818151811061252f5761252f614d95565b602002602001015182019150806001019050612514565b5060005b89518110156126c857600060ac60008c848151811061256b5761256b614d95565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054116125e15760405162461bcd60e51b815260206004820152601360248201527f73657175656e636572206e6f74206578697374000000000000000000000000006044820152606401610c7d565b61262860ac60008c84815181106125fa576125fa614d95565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546117e1565b6126745760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642073657175656e6365720000000000000000000000000000006044820152606401610c7d565b600061269a84848c858151811061268d5761268d614d95565b6020026020010151613a03565b90506126bf8b83815181106126b1576126b1614d95565b602002602001015182613a19565b5060010161254a565b506126d1613a53565b609a54604051637c446e5960e01b8152600481018f90526001600160a01b0390911690637c446e5990602401600060405180830381600087803b15801561271757600080fd5b505af115801561272b573d6000803e3d6000fd5b505060985461274892506001600160a01b031690508d3085613acd565b509b9a5050505050505050505050565b6127606131f7565b33600090815260b2602052604090205460ff166127ce5760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b60aa5460af54106128215760405162461bcd60e51b815260206004820152600d60248201527f6e6f206d6f726520736c6f7473000000000000000000000000000000000000006044820152606401610c7d565b60a6548210156128735760405162461bcd60e51b815260206004820152601860248201527f616d6f756e74206c657373207468616e206d696e4c6f636b00000000000000006044820152606401610c7d565b60a7548211156128c55760405162461bcd60e51b815260206004820152601960248201527f616d6f756e74206c61726765207468616e206d61784c6f636b000000000000006044820152606401610c7d565b33600090815260b360205260409020546001600160a01b03161561292b5760405162461bcd60e51b815260206004820152601360248201527f68616420626f756e642073657175656e636572000000000000000000000000006044820152606401610c7d565b612936838383613b65565b5033600081815260b36020526040902080546001600160a01b0319166001600160a01b038616179055611477903084613326565b61297261333e565b600082815260ab602052604090206007810154600290910154600160a01b90910460ff1690158015906129b45750600083815260ab6020526040902060030154155b80156129d1575060018160028111156129cf576129cf614903565b145b612a1d5760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642073657175656e6365722073746174757300000000000000006044820152606401610c7d565b61147783609d54600185613561565b612a3461333e565b612a3d816138d1565b15612a8a5760405162461bcd60e51b815260206004820152601560248201527f5f6e65774d7063206973206120636f6e747261637400000000000000000000006044820152606401610c7d565b6001600160a01b038116612ae05760405162461bcd60e51b815260206004820152601760248201527f5f6e65774d7063206973207a65726f20616464726573730000000000000000006044820152606401610c7d565b60a980546001600160a01b03199081166001600160a01b03848116918217909355604080518082018252438152602080820184815260b4805460018101825560009190915292517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c503600290940293840155517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c5049092018054909516919095161790925590519081527fc6759872346bc2093e270f2fa00d99d7bcdde60a410a3e9956b34196d42fee769101611096565b612bb861333e565b611942613e5b565b33600090815260b2602052604090205460ff16612c2e5760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614612cba5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b6001600160a01b038116612d105760405162461bcd60e51b815260206004820152601160248201527f696e76616c696420726563697069656e740000000000000000000000000000006044820152606401610c7d565b600082815260ab60209081526040918290206007810180546001600160a01b0319166001600160a01b038616908117909155835186815292830152917f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb6910160405180910390a1505050565b612d8461333e565b6001600160a01b038216600090815260b2602052604090205481151560ff909116151503612df45760405162461bcd60e51b815260206004820152601060248201527f7374617465206e6f74206368616e6765000000000000000000000000000000006044820152606401610c7d565b6001600160a01b038216600081815260b26020908152604091829020805460ff19168515159081179091558251938452908301527faec42ac7f1bb8651906ae6522f50a19429e124e8ea678ef59fd27750759288a2910160405180910390a15050565b612e5f61333e565b6001600160a01b038116612edb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c7d565b612ee481613812565b50565b33600090815260b2602052604090205460ff16612f555760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614612fe15760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab6020526040902060030154156130405760405162461bcd60e51b815260206004820152601060248201527f6578697465642073657175656e636572000000000000000000000000000000006044820152606401610c7d565b600061304b82613e98565b609d5460a854600086815260b16020526040902054929350909161306f9190614d6f565b8110156130be5760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610c7d565b600084815260ab60205260409081902060060154609a54915163b80fbce560e01b81526001600160a01b03918216929091169063b80fbce59061310b908890859088908a90600401614f00565b600060405180830381600087803b15801561312557600080fd5b505af1158015613139573d6000803e3d6000fd5b5050505061314681613f6c565b61314f83614072565b6001600160a01b03818116600090815260ac6020908152604080832060001990558684168084528184208a905589845260ab835281842060060180546001600160a01b031990811683179091553380865260b38552838620805490921683179091558a855260b190935292819020869055609b5490516323b872dd60e01b815260048101929092526024820192909252604481018890529116906323b872dd90606401610fd4565b60655460ff16156119425760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610c7d565b806000036132d85760008313156132715760ae54613269908490614d6f565b60ae55613297565b60008312156132975761328683600019614f3c565b60ae546132939190614d82565b60ae555b60008213156132b65760af546132ae908390614d6f565b60af55505050565b6000821215611477576132cb82600019614f3c565b60af546132ae9190614d82565b600081815260b06020526040812080548592906132f6908490614f6c565b9091555050600081815260b060205260408120600101805484929061331c908490614f6c565b9091555050505050565b609854611477906001600160a01b0316848484613acd565b6033546001600160a01b031633146119425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c7d565b6001600160a01b0382166133ee5760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642072657761726420726563697069656e7400000000000000006044820152606401610c7d565b600083815260ab602052604090206001015460a05461340e908290614d6f565b60a055600084815260ab6020526040812060010155609754609854613440916001600160a01b039182169116836141b9565b60975460b5546098546099546040516377c045f160e11b815260048101939093526001600160a01b0391821660248401528116604483015285811660648301526084820184905263ffffffff851660a483015260e060c4830152600060e48301529091169063ef808be2903490610104016000604051808303818588803b1580156134ca57600080fd5b505af11580156134de573d6000803e3d6000fd5b5050609a5460a05460405163e9abe50960e01b8152600481018a90526001600160a01b0389811660248301526044820188905260648201929092529116935063e9abe50992506084019050600060405180830381600087803b15801561354357600080fd5b505af1158015613557573d6000803e3d6000fd5b5050505050505050565b816135d15760af5461357590600390614f94565b60a254613583906001614d6f565b11156135d15760405162461bcd60e51b815260206004820152601260248201527f756e6c6f636b206e6f7420616c6c6f77656400000000000000000000000000006044820152606401610c7d565b600084815260ab602052604080822054609b5491516331a9108f60e11b8152600481018890529092916001600160a01b031690636352211e90602401602060405180830381865afa15801561362a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364e9190614ddb565b600087815260ab6020526040902060078101805460ff60a01b1916905560038101879055426004909101819055609c5491925061368b9190614d6f565b600087815260ab6020526040812060050191909155609d548611156136b057856136b3565b60005b90506136ca6136c184614fb6565b6000198361324a565b60a280549060006136da83614fd2565b9091555050600087815260ab6020526040902060060154613703906001600160a01b0316613f6c565b600087815260ab602052604090206007015461372a9088906001600160a01b031686613398565b609a54600088815260ab6020526040908190206004808201546005909201549251636337e56160e11b81526001600160a01b0387811692820192909252602481018c9052604481018b90526064810192909252608482019290925260a4810186905291169063c66fcac29060c401600060405180830381600087803b1580156137b257600080fd5b505af11580156137c6573d6000803e3d6000fd5b5050505050505050505050565b6000808411801561380757508215806137eb57508183115b806138075750600185600281111561380557613805614903565b145b90505b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61386c614266565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6098546138cd906001600160a01b031683836142b8565b5050565b60006001600160a01b0382166138e957506000919050565b506001600160a01b03163b151590565b600054610100900460ff166139645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b6119426142e8565b600054610100900460ff166139d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b61194261435c565b60008060006139ee85856143d3565b915091506139fb81614418565b509392505050565b6000613a0f8383614f94565b61380a9085614e99565b6001600160a01b038216600090815260ac602090815260408083205480845260ab909252822060010180549192849261331c908490614d6f565b6000609d546001613a649190614d6f565b600081815260ad60209081526040808320805460ff1916600190811790915560b083528184208251808401909352805480845291015492820183905293945092613ab09290919061324a565b50609d8054600090815260b0602052604081208181556001015555565b6040516001600160a01b03808516602483015283166044820152606481018290526117db9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614562565b600080613b7183613e98565b9050806001600160a01b0316856001600160a01b031614613bd45760405162461bcd60e51b815260206004820152601e60248201527f7573657220616e64207369676e65725075626b6579206d69736d6174636800006044820152606401610c7d565b609d54609f54609e54600090613beb908890614d6f565b905080609e8190555060405180610120016040528088815260200160008152602001848152602001600081526020016000815260200160008152602001856001600160a01b0316815260200160006001600160a01b0316815260200160016002811115613c5a57613c5a614903565b9052600083815260ab60209081526040918290208351815590830151600182015590820151600280830191909155606083015160038301556080830151600483015560a0830151600583015560c08301516006830180546001600160a01b03199081166001600160a01b039384161790915560e0850151600785018054928316919093169081178355610100860151937fffffffffffffffffffffff0000000000000000000000000000000000000000009092161790600160a01b908490811115613d2757613d27614903565b02179055505050600082815260b1602090815260408083208690556001600160a01b038716835260ac9091528120839055613d6690889060019061324a565b613d71826001614d6f565b609f55613d7d84614072565b609a5460405163056de39160e41b81526001600160a01b03909116906356de391090613db79087908a90879089908e908990600401614feb565b600060405180830381600087803b158015613dd157600080fd5b505af1158015613de5573d6000803e3d6000fd5b5050609b546040516340c10f1960e01b81526001600160a01b038c811660048301526024820187905290911692506340c10f199150604401600060405180830381600087803b158015613e3757600080fd5b505af1158015613e4b573d6000803e3d6000fd5b50939a9950505050505050505050565b613e636131f7565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586138993390565b60008151604014613eeb5760405162461bcd60e51b815260206004820152600760248201527f6e6f7420707562000000000000000000000000000000000000000000000000006044820152606401610c7d565b815160208301206001600160a01b03811615801590613f2057506001600160a01b038116600090815260ac6020526040902054155b6114f25760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e65720000000000000000000000000000000000006044820152606401610c7d565b60a15460005b8181101561147757826001600160a01b031660a18281548110613f9757613f97614d95565b6000918252602090912001546001600160a01b0316036140605760a1613fbe600184614d82565b81548110613fce57613fce614d95565b60009182526020909120015460a180546001600160a01b039092169183908110613ffa57613ffa614d95565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a180548061403957614039615032565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b8061406a81614fd2565b915050613f72565b60a180546001808201835560008381527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987890920180546001600160a01b0319166001600160a01b038616179055915490916140cc91614d82565b9050805b801561416b57600060a16140e5600184614d82565b815481106140f5576140f5614d95565b6000918252602090912001546001600160a01b039081169150841681101561411d575061416b565b8060a1838154811061413157614131614d95565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790555061416481614dab565b90506140d0565b818114611477578260a1828154811061418657614186614d95565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015614209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422d9190614dc2565b90506117db8463095ea7b360e01b856142468686614d6f565b6040516001600160a01b0390921660248301526044820152606401613b01565b60655460ff166119425760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c7d565b6040516001600160a01b03831660248201526044810182905261147790849063a9059cbb60e01b90606401613b01565b600054610100900460ff166143535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b61194233613812565b600054610100900460ff166143c75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b6065805460ff19169055565b60008082516041036144095760208301516040840151606085015160001a6143fd8782858561464a565b94509450505050614411565b506000905060025b9250929050565b600081600481111561442c5761442c614903565b036144345750565b600181600481111561444857614448614903565b036144955760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c7d565b60028160048111156144a9576144a9614903565b036144f65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c7d565b600381600481111561450a5761450a614903565b03612ee45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c7d565b60006145b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661470e9092919063ffffffff16565b90508051600014806145d85750808060200190518101906145d89190615048565b6114775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c7d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156146815750600090506003614705565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156146d5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166146fe57600060019250925050614705565b9150600090505b94509492505050565b606061380a848460008585600080866001600160a01b031685876040516147359190615065565b60006040518083038185875af1925050503d8060008114614772576040519150601f19603f3d011682016040523d82523d6000602084013e614777565b606091505b509150915061478887838387614793565b979650505050505050565b606083156148025782516000036147fb576001600160a01b0385163b6147fb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c7d565b508161380a565b61380a83838151156148175781518083602001fd5b8060405162461bcd60e51b8152600401610c7d9190615081565b8015158114612ee457600080fd5b60008060006060848603121561485457600080fd5b8335925060208401359150604084013561486d81614831565b809150509250925092565b60006020828403121561488a57600080fd5b5035919050565b600080604083850312156148a457600080fd5b82359150602083013563ffffffff811681146148bf57600080fd5b809150509250929050565b6001600160a01b0381168114612ee457600080fd5b6000602082840312156148f157600080fd5b81356148fc816148ca565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6000610120820190508a82528960208301528860408301528760608301528660808301528560a08301526001600160a01b0380861660c084015280851660e0840152506003831061497a57634e487b7160e01b600052602160045260246000fd5b826101008301529a9950505050505050505050565b60008060008060008060c087890312156149a857600080fd5b86356149b3816148ca565b955060208701356149c3816148ca565b945060408701356149d3816148ca565b935060608701356149e3816148ca565b925060808701356149f3816148ca565b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614a4757614a47614a08565b604052919050565b600067ffffffffffffffff821115614a6957614a69614a08565b5060051b60200190565b600082601f830112614a8457600080fd5b81356020614a99614a9483614a4f565b614a1e565b82815260059290921b84018101918181019086841115614ab857600080fd5b8286015b84811015614ad35780358352918301918301614abc565b509695505050505050565b600082601f830112614aef57600080fd5b813567ffffffffffffffff811115614b0957614b09614a08565b614b1c601f8201601f1916602001614a1e565b818152846020838601011115614b3157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a031215614b6957600080fd5b87359650602080890135614b7c816148ca565b96506040890135955060608901359450608089013567ffffffffffffffff80821115614ba757600080fd5b818b0191508b601f830112614bbb57600080fd5b8135614bc9614a9482614a4f565b81815260059190911b8301840190848101908e831115614be857600080fd5b938501935b82851015614c0f578435614c00816148ca565b82529385019390850190614bed565b9750505060a08b0135925080831115614c2757600080fd5b614c338c848d01614a73565b945060c08b0135925080831115614c4957600080fd5b5050614c578a828b01614ade565b91505092959891949750929550565b600080600060608486031215614c7b57600080fd5b8335614c86816148ca565b925060208401359150604084013567ffffffffffffffff811115614ca957600080fd5b614cb586828701614ade565b9150509250925092565b60008060408385031215614cd257600080fd5b8235915060208301356148bf816148ca565b60008060408385031215614cf757600080fd5b8235614d02816148ca565b915060208301356148bf81614831565b60008060408385031215614d2557600080fd5b82359150602083013567ffffffffffffffff811115614d4357600080fd5b614d4f85828601614ade565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b808201808211156114f2576114f2614d59565b818103818111156114f2576114f2614d59565b634e487b7160e01b600052603260045260246000fd5b600081614dba57614dba614d59565b506000190190565b600060208284031215614dd457600080fd5b5051919050565b600060208284031215614ded57600080fd5b81516148fc816148ca565b87815260006020888184015287604084015286606084015260808301865182880160005b82811015614e415781516001600160a01b031684529284019290840190600101614e1c565b5050865183880192915060005b81811015614e6a57835183529284019291840191600101614e4e565b5050614e87818760601b6bffffffffffffffffffffffff19169052565b6014019b9a5050505050505050505050565b80820281158282048414176114f2576114f2614d59565b60005b83811015614ecb578181015183820152602001614eb3565b50506000910152565b60008151808452614eec816020860160208601614eb0565b601f01601f19169290920160200192915050565b84815260006001600160a01b03808616602084015280851660408401525060806060830152614f326080830184614ed4565b9695505050505050565b80820260008212600160ff1b84141615614f5857614f58614d59565b81810583148215176114f2576114f2614d59565b8082018281126000831280158216821582161715614f8c57614f8c614d59565b505092915050565b600082614fb157634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b8201614fcb57614fcb614d59565b5060000390565b600060018201614fe457614fe4614d59565b5060010190565b6001600160a01b038716815260c06020820152600061500d60c0830188614ed4565b90508560408301528460608301528360808301528260a0830152979650505050505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561505a57600080fd5b81516148fc81614831565b60008251615077818460208701614eb0565b9190910192915050565b6020815260006148fc6020830184614ed456fea164736f6c6343000814000a",
  "deployedBytecode": "0x6080604052600436106103c35760003560e01c8063715018a6116101f2578063c0f00d5a1161010d578063e4a86a99116100a0578063f24ccbfe1161006f578063f24ccbfe14610b88578063f2fde38b14610ba8578063f41a964214610bc8578063f788870c14610be857600080fd5b8063e4a86a9914610b02578063e78cea9214610b22578063ef91cdba14610b42578063f037c63014610b7257600080fd5b8063d431b1ac116100dc578063d431b1ac14610a8a578063d6ae3cd514610a9f578063d83b0e1414610ab5578063ddd1d83014610ad557600080fd5b8063c0f00d5a14610a1e578063ca99e83814610a34578063cd6b838814610a54578063d11d068114610a6a57600080fd5b8063920674dc11610185578063a2512d7911610154578063a2512d791461099b578063af70cba5146109ae578063b3bf1021146109ce578063c01e1bd6146109fe57600080fd5b8063920674dc1461091f5780639231cf741461094f57806395b6ef0c146109655780639ab19a8f1461098557600080fd5b8063848cb5c6116101c1578063848cb5c6146108c45780638da5cb5b146108d95780638ddc74de146108f757806391f1fb731461090a57600080fd5b8063715018a61461085957806371e10cfa1461086e57806376cd940e1461088e57806378627f2b146108a457600080fd5b806333a8545f116102e257806356891412116102755780636352211e116102445780636352211e1461077757806367c7c482146107975780636ba7ccff146107b75780636c0b3e461461084357600080fd5b806356891412146106fc57806356eff267146107125780635aabca4f146107325780635c975abb1461075f57600080fd5b80634b3fbda2116102b15780634b3fbda2146106875780634e3c83f1146106bb578063500d3fc0146106d15780635508d8e1146106e657600080fd5b806333a8545f146105e457806335209ac5146105fa578063387b32dd1461062a5780633e8eef891461065a57600080fd5b806315dcb5cd1161035a5780631f1c6105116103295780631f1c6105146105715780632079fb9a14610591578063262c0e66146105b157806331c2273b146105c457600080fd5b806315dcb5cd1461050857806317396687146105285780631950dd111461053b5780631c7d13a61461055157600080fd5b80631092b047116103965780631092b04714610453578063111f46301461047357806312254b55146104ab57806314e482aa146104e857600080fd5b8063015bb180146103c857806306cfb104146103ea57806307104a241461040a5780630ebb172a1461042a575b600080fd5b3480156103d457600080fd5b506103e86103e336600461483f565b610c1e565b005b3480156103f657600080fd5b506103e8610405366004614878565b61100d565b34801561041657600080fd5b506103e8610425366004614878565b6110a1565b34801561043657600080fd5b50610440609c5481565b6040519081526020015b60405180910390f35b34801561045f57600080fd5b506103e861046e366004614878565b61112e565b34801561047f57600080fd5b5060a954610493906001600160a01b031681565b6040516001600160a01b03909116815260200161044a565b3480156104b757600080fd5b506104cb6104c6366004614878565b6111f4565b604080519283526001600160a01b0390911660208301520161044a565b3480156104f457600080fd5b506103e8610503366004614878565b61122b565b34801561051457600080fd5b50610493610523366004614878565b6112c0565b6103e8610536366004614891565b611355565b34801561054757600080fd5b5061044060aa5481565b34801561055d57600080fd5b5061044061056c3660046148df565b61147c565b34801561057d57600080fd5b506103e861058c366004614878565b6114f8565b34801561059d57600080fd5b506104936105ac366004614878565b611585565b6103e86105bf366004614891565b6115af565b3480156105d057600080fd5b50609b54610493906001600160a01b031681565b3480156105f057600080fd5b5061044060a55481565b34801561060657600080fd5b5061061a610615366004614878565b6117e1565b604051901515815260200161044a565b34801561063657600080fd5b5060ae5460af54610645919082565b6040805192835260208301919091520161044a565b34801561066657600080fd5b506104406106753660046148df565b60ac6020526000908152604090205481565b34801561069357600080fd5b506106456106a2366004614878565b60b0602052600090815260409020805460019091015482565b3480156106c757600080fd5b5061044060a85481565b3480156106dd57600080fd5b5060af54610440565b3480156106f257600080fd5b50610440609f5481565b34801561070857600080fd5b50610440609e5481565b34801561071e57600080fd5b50609954610493906001600160a01b031681565b34801561073e57600080fd5b5061044061074d366004614878565b600090815260ab602052604090205490565b34801561076b57600080fd5b5060655460ff1661061a565b34801561078357600080fd5b50610493610792366004614878565b611816565b3480156107a357600080fd5b506103e86107b23660046148df565b611884565b3480156107c357600080fd5b5061082e6107d2366004614878565b60ab60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b0391821691811690600160a01b900460ff1689565b60405161044a99989796959493929190614919565b34801561084f57600080fd5b5061044060a75481565b34801561086557600080fd5b506103e8611930565b34801561087a57600080fd5b506103e8610889366004614878565b611944565b34801561089a57600080fd5b50610440609d5481565b3480156108b057600080fd5b506103e86108bf3660046148df565b6119d9565b3480156108d057600080fd5b506103e8611a85565b3480156108e557600080fd5b506033546001600160a01b0316610493565b6103e8610905366004614891565b611a95565b34801561091657600080fd5b5060ae54610440565b34801561092b57600080fd5b5061061a61093a3660046148df565b60b26020526000908152604090205460ff1681565b34801561095b57600080fd5b5061044060a45481565b34801561097157600080fd5b506103e861098036600461498f565b611e54565b34801561099157600080fd5b5061044060a25481565b6104406109a9366004614b4e565b6122b7565b3480156109ba57600080fd5b506103e86109c9366004614c66565b612758565b3480156109da57600080fd5b506104406109e9366004614878565b600090815260ab602052604090206001015490565b348015610a0a57600080fd5b50609854610493906001600160a01b031681565b348015610a2a57600080fd5b5061044060a35481565b348015610a4057600080fd5b506103e8610a4f366004614891565b61296a565b348015610a6057600080fd5b5061044060a05481565b348015610a7657600080fd5b506103e8610a853660046148df565b612a2c565b348015610a9657600080fd5b506103e8612bb0565b348015610aab57600080fd5b5061044060b55481565b348015610ac157600080fd5b506103e8610ad0366004614cbf565b612bc0565b348015610ae157600080fd5b50610440610af0366004614878565b60b16020526000908152604090205481565b348015610b0e57600080fd5b506103e8610b1d366004614ce4565b612d7c565b348015610b2e57600080fd5b50609754610493906001600160a01b031681565b348015610b4e57600080fd5b5061061a610b5d366004614878565b60ad6020526000908152604090205460ff1681565b348015610b7e57600080fd5b5061044060a65481565b348015610b9457600080fd5b50609a54610493906001600160a01b031681565b348015610bb457600080fd5b506103e8610bc33660046148df565b612e57565b348015610bd457600080fd5b506103e8610be3366004614d12565b612ee7565b348015610bf457600080fd5b50610493610c033660046148df565b60b3602052600090815260409020546001600160a01b031681565b610c266131f7565b600083815260ab6020526040902054610c865760405162461bcd60e51b815260206004820152601f60248201527f696e76616c69642073657175656e636572206c6f636b656420616d6f756e740060448201526064015b60405180910390fd5b600083815260ab602052604090206003015415610ce55760405162461bcd60e51b815260206004820152600c60248201527f6e6f2072656c6f636b696e6700000000000000000000000000000000000000006044820152606401610c7d565b33600090815260b2602052604090205460ff16610d535760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600083815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614610ddf5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b818115610e1757600084815260ab6020526040902060010154610e029084614d6f565b600085815260ab602052604081206001015592505b60008311610e675760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642072656c6f636b20616d6f756e7400000000000000000000006044820152606401610c7d565b600083609e54610e779190614d6f565b609e819055600086815260ab6020526040902054909150610e99908590614d6f565b600086815260ab6020526040902081905560a7541015610efb5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e74206c61726765207468616e206d61784c6f636b000000000000006044820152606401610c7d565b610f078460008061324a565b610f12333084613326565b609a54600086815260ab6020526040908190205490516307c5c28360e41b81526004810188905260248101919091526001600160a01b0390911690637c5c283090604401600060405180830381600087803b158015610f7057600080fd5b505af1158015610f84573d6000803e3d6000fd5b5050609a54600088815260ab6020526040908190205490516332417e2360e21b8152600481018a90526024810191909152604481018590526001600160a01b03909116925063c905f88c91506064015b600060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050505050505050565b61101561333e565b600081116110655760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964205f6c696d69740000000000000000000000000000000000006044820152606401610c7d565b60a88190556040518181527faa85c21e3ef84a69e2213d37b0df2df818a6ec0252244b4411a956e2293d170f906020015b60405180910390a150565b6110a961333e565b600081116110f95760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6d696e4c6f636b000000000000000000000000000000006044820152606401610c7d565b60a68190556040518181527feaf0654a2bc3f772cd56f5160f2b340c6ab0432789d24b37418c16d13f85ad3490602001611096565b61113661333e565b806000036111865760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206e65775468726573686f6c640000000000000000000000006044820152606401610c7d565b60aa819055609a54604051630f1980a560e41b815260048101839052602481018390526001600160a01b039091169063f1980a50906044015b600060405180830381600087803b1580156111d957600080fd5b505af11580156111ed573d6000803e3d6000fd5b5050505050565b60b4818154811061120457600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b61123361333e565b806000036112835760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964206e65775265776172640000000000000000000000000000006044820152606401610c7d565b60a5819055609a54604051632dbe9d3160e21b815260048101839052602481018390526001600160a01b039091169063b6fa74c4906044016111bf565b6000806000600160b4805490506112d79190614d82565b90505b60b481815481106112ed576112ed614d95565b906000526020600020906002020160000154841061133c5760b4818154811061131857611318614d95565b60009182526020909120600160029092020101546001600160a01b0316915061134e565b8061134681614dab565b9150506112da565b5092915050565b33600090815260b2602052604090205460ff166113c35760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b0390811691161461144f5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab6020526040902060078101546114779084906001600160a01b031684613398565b505050565b609b54604051632f745c5960e01b81526001600160a01b038381166004830152600060248301819052921690632f745c5990604401602060405180830381865afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190614dc2565b92915050565b61150061333e565b600081116115505760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6d61784c6f636b000000000000000000000000000000006044820152606401610c7d565b60a78190556040518181527f8e94bf4c11cd704dc7bfe91bea29d42a0d6c9afa7f76bff08694ef530ae42c2e90602001611096565b60a1818154811061159557600080fd5b6000918252602090912001546001600160a01b0316905081565b33600090815260b2602052604090205460ff1661161d5760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b039081169116146116a95760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab60205260409020600701546001600160a01b03166117105760405162461bcd60e51b815260206004820152601760248201527f726577617264526563697069656e74206e6f74207365740000000000000000006044820152606401610c7d565b600082815260ab602052604090206007810154600290910154600160a01b90910460ff1690158015906117525750600083815260ab6020526040902060030154155b801561176f5750600181600281111561176d5761176d614903565b145b6117bb5760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642073657175656e6365722073746174757300000000000000006044820152606401610c7d565b6000609d5460016117cc9190614d6f565b90506117db8482600086613561565b50505050565b600081815260ab6020526040812060078101548154600390920154609d546114f293600160a01b90930460ff169291906137d3565b609b546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e90602401602060405180830381865afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190614ddb565b61188c61333e565b6001600160a01b0381166118e25760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964205f6c6f636b696e67496e666f0000000000000000000000006044820152606401610c7d565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fa1ac06f5f295091163015710ca4e5ca0303f40e6f3dd6cb99c554d703c0ee7f690602001611096565b61193861333e565b6119426000613812565b565b61194c61333e565b6000811161199c5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e6577576974686472617744656c617954696d65000000006044820152606401610c7d565b609c819055609a546040516343d2b49b60e01b815260048101839052602481018390526001600160a01b03909116906343d2b49b906044016111bf565b6119e161333e565b6001600160a01b038116611a375760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964205f6e6674436f6e74726163740000000000000000000000006044820152606401610c7d565b609b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f6b004b7db7a4ceb691c66bd356de43d2dd8def042c6e4fb8be233e0ced628da590602001611096565b611a8d61333e565b611942613864565b33600090815260b2602052604090205460ff16611b035760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614611b8f5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab60205260409020600701546001600160a01b0316611bf65760405162461bcd60e51b815260206004820152601760248201527f726577617264526563697069656e74206e6f74207365740000000000000000006044820152606401610c7d565b600082815260ab6020526040902060038101546005909101548115801590611c1e5750428111155b8015611c5757506002600085815260ab6020526040902060070154600160a01b900460ff166002811115611c5457611c54614903565b14155b611ca35760405162461bcd60e51b815260206004820152601160248201527f636c61696d206e6f7420616c6c6f7765640000000000000000000000000000006044820152606401610c7d565b600084815260ab6020526040812054609e54909190611cc3908390614d82565b609e819055600087815260ab6020526040902060070154909150611cf29087906001600160a01b031687613398565b600086815260ab602052604081208181556006810180546001600160a01b03191690556000197fcb32a14641dfad80670595f3e53f5dc52441fb5380c11f8eebcd755e5b33a3d955600701805460ff60a01b19167402000000000000000000000000000000000000000017905560a2805491611d6d83614dab565b9190505550611d7c33836138b6565b609a5460405163492b6d4960e11b81523360048201526024810188905260448101849052606481018390526001600160a01b0390911690639256da9290608401600060405180830381600087803b158015611dd657600080fd5b505af1158015611dea573d6000803e3d6000fd5b5050609b54604051630852cd8d60e31b8152600481018a90526001600160a01b0390911692506342966c689150602401600060405180830381600087803b158015611e3457600080fd5b505af1158015611e48573d6000803e3d6000fd5b50505050505050505050565b600054610100900460ff1615808015611e745750600054600160ff909116105b80611e8e5750303b158015611e8e575060005460ff166001145b611f005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c7d565b6000805460ff191660011790558015611f23576000805461ff0019166101001790555b6001600160a01b038716611f795760405162461bcd60e51b815260206004820152600f60248201527f696e76616c6964205f62726964676500000000000000000000000000000000006044820152606401610c7d565b6001600160a01b038616611fcf5760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6c31546f6b656e000000000000000000000000000000006044820152606401610c7d565b6001600160a01b0385166120255760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964205f6c32546f6b656e000000000000000000000000000000006044820152606401610c7d565b6001600160a01b03841661207b5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964205f4e4654436f6e74726163740000000000000000000000006044820152606401610c7d565b6001600160a01b0383166120d15760405162461bcd60e51b815260206004820152601460248201527f5f6d7063206973207a65726f20616464726573730000000000000000000000006044820152606401610c7d565b609780546001600160a01b03808a166001600160a01b0319928316179092556098805489841690831617905560998054888416908316179055609b805492871692909116919091179055612124836138d1565b156121715760405162461bcd60e51b815260206004820152601260248201527f5f6d7063206973206120636f6e747261637400000000000000000000000000006044820152606401610c7d565b60a980546001600160a01b03199081166001600160a01b03868116918217909355604080518082019091524381526020810191825260b480546001818101835560009290925291517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c50360029093029283015591517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c50490910180549093169316929092179055621baf80609c55609d8190556305f5e10060a55569043c33c193756480000060a65569152d02c7e14af680000060a755600a60a881905560aa55609f5560b58290556122606138f9565b61226861396c565b80156122ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600080609d5460016122c99190614d6f565b905088811461231a5760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964206261746368206964000000000000000000000000000000006044820152606401610c7d565b835185511461236b5760405162461bcd60e51b815260206004820152600f60248201527f6d69736d61746368206c656e67746800000000000000000000000000000000006044820152606401610c7d565b8660a354106123bc5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420737461727445706f636800000000000000000000000000006044820152606401610c7d565b85871061240b5760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420656e6445706f6368000000000000000000000000000000006044820152606401610c7d565b60a38690556040516000906124309046908c908b908b908b908b903090602001614df8565b60405160208183030381529060405280519060200120905061247f817f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b9050600061248d82866139df565b60a9549091506001600160a01b038083169116146124ed5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206d7063207369676e617475726500000000000000000000006044820152606401610c7d565b600060a454426124fd9190614d82565b60a55461250a9190614e99565b4260a45590506000805b88518110156125465788818151811061252f5761252f614d95565b602002602001015182019150806001019050612514565b5060005b89518110156126c857600060ac60008c848151811061256b5761256b614d95565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054116125e15760405162461bcd60e51b815260206004820152601360248201527f73657175656e636572206e6f74206578697374000000000000000000000000006044820152606401610c7d565b61262860ac60008c84815181106125fa576125fa614d95565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546117e1565b6126745760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642073657175656e6365720000000000000000000000000000006044820152606401610c7d565b600061269a84848c858151811061268d5761268d614d95565b6020026020010151613a03565b90506126bf8b83815181106126b1576126b1614d95565b602002602001015182613a19565b5060010161254a565b506126d1613a53565b609a54604051637c446e5960e01b8152600481018f90526001600160a01b0390911690637c446e5990602401600060405180830381600087803b15801561271757600080fd5b505af115801561272b573d6000803e3d6000fd5b505060985461274892506001600160a01b031690508d3085613acd565b509b9a5050505050505050505050565b6127606131f7565b33600090815260b2602052604090205460ff166127ce5760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b60aa5460af54106128215760405162461bcd60e51b815260206004820152600d60248201527f6e6f206d6f726520736c6f7473000000000000000000000000000000000000006044820152606401610c7d565b60a6548210156128735760405162461bcd60e51b815260206004820152601860248201527f616d6f756e74206c657373207468616e206d696e4c6f636b00000000000000006044820152606401610c7d565b60a7548211156128c55760405162461bcd60e51b815260206004820152601960248201527f616d6f756e74206c61726765207468616e206d61784c6f636b000000000000006044820152606401610c7d565b33600090815260b360205260409020546001600160a01b03161561292b5760405162461bcd60e51b815260206004820152601360248201527f68616420626f756e642073657175656e636572000000000000000000000000006044820152606401610c7d565b612936838383613b65565b5033600081815260b36020526040902080546001600160a01b0319166001600160a01b038616179055611477903084613326565b61297261333e565b600082815260ab602052604090206007810154600290910154600160a01b90910460ff1690158015906129b45750600083815260ab6020526040902060030154155b80156129d1575060018160028111156129cf576129cf614903565b145b612a1d5760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642073657175656e6365722073746174757300000000000000006044820152606401610c7d565b61147783609d54600185613561565b612a3461333e565b612a3d816138d1565b15612a8a5760405162461bcd60e51b815260206004820152601560248201527f5f6e65774d7063206973206120636f6e747261637400000000000000000000006044820152606401610c7d565b6001600160a01b038116612ae05760405162461bcd60e51b815260206004820152601760248201527f5f6e65774d7063206973207a65726f20616464726573730000000000000000006044820152606401610c7d565b60a980546001600160a01b03199081166001600160a01b03848116918217909355604080518082018252438152602080820184815260b4805460018101825560009190915292517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c503600290940293840155517f1c5f5ac147ec2dee04d8ce29bdbebbc58f578e0e1392da66f352a62e5c09c5049092018054909516919095161790925590519081527fc6759872346bc2093e270f2fa00d99d7bcdde60a410a3e9956b34196d42fee769101611096565b612bb861333e565b611942613e5b565b33600090815260b2602052604090205460ff16612c2e5760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614612cba5760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b6001600160a01b038116612d105760405162461bcd60e51b815260206004820152601160248201527f696e76616c696420726563697069656e740000000000000000000000000000006044820152606401610c7d565b600082815260ab60209081526040918290206007810180546001600160a01b0319166001600160a01b038616908117909155835186815292830152917f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb6910160405180910390a1505050565b612d8461333e565b6001600160a01b038216600090815260b2602052604090205481151560ff909116151503612df45760405162461bcd60e51b815260206004820152601060248201527f7374617465206e6f74206368616e6765000000000000000000000000000000006044820152606401610c7d565b6001600160a01b038216600081815260b26020908152604091829020805460ff19168515159081179091558251938452908301527faec42ac7f1bb8651906ae6522f50a19429e124e8ea678ef59fd27750759288a2910160405180910390a15050565b612e5f61333e565b6001600160a01b038116612edb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c7d565b612ee481613812565b50565b33600090815260b2602052604090205460ff16612f555760405162461bcd60e51b815260206004820152602660248201527f6d73672073656e6465722073686f756c6420626520696e20746865207768697460448201526519481b1a5cdd60d21b6064820152608401610c7d565b600082815260ab602090815260408083206006015433845260b3909252909120546001600160a01b03908116911614612fe15760405162461bcd60e51b815260206004820152602860248201527f77686974654164647265737320616e6420626f756e6453657175656e636572206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c7d565b600082815260ab6020526040902060030154156130405760405162461bcd60e51b815260206004820152601060248201527f6578697465642073657175656e636572000000000000000000000000000000006044820152606401610c7d565b600061304b82613e98565b609d5460a854600086815260b16020526040902054929350909161306f9190614d6f565b8110156130be5760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610c7d565b600084815260ab60205260409081902060060154609a54915163b80fbce560e01b81526001600160a01b03918216929091169063b80fbce59061310b908890859088908a90600401614f00565b600060405180830381600087803b15801561312557600080fd5b505af1158015613139573d6000803e3d6000fd5b5050505061314681613f6c565b61314f83614072565b6001600160a01b03818116600090815260ac6020908152604080832060001990558684168084528184208a905589845260ab835281842060060180546001600160a01b031990811683179091553380865260b38552838620805490921683179091558a855260b190935292819020869055609b5490516323b872dd60e01b815260048101929092526024820192909252604481018890529116906323b872dd90606401610fd4565b60655460ff16156119425760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610c7d565b806000036132d85760008313156132715760ae54613269908490614d6f565b60ae55613297565b60008312156132975761328683600019614f3c565b60ae546132939190614d82565b60ae555b60008213156132b65760af546132ae908390614d6f565b60af55505050565b6000821215611477576132cb82600019614f3c565b60af546132ae9190614d82565b600081815260b06020526040812080548592906132f6908490614f6c565b9091555050600081815260b060205260408120600101805484929061331c908490614f6c565b9091555050505050565b609854611477906001600160a01b0316848484613acd565b6033546001600160a01b031633146119425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c7d565b6001600160a01b0382166133ee5760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642072657761726420726563697069656e7400000000000000006044820152606401610c7d565b600083815260ab602052604090206001015460a05461340e908290614d6f565b60a055600084815260ab6020526040812060010155609754609854613440916001600160a01b039182169116836141b9565b60975460b5546098546099546040516377c045f160e11b815260048101939093526001600160a01b0391821660248401528116604483015285811660648301526084820184905263ffffffff851660a483015260e060c4830152600060e48301529091169063ef808be2903490610104016000604051808303818588803b1580156134ca57600080fd5b505af11580156134de573d6000803e3d6000fd5b5050609a5460a05460405163e9abe50960e01b8152600481018a90526001600160a01b0389811660248301526044820188905260648201929092529116935063e9abe50992506084019050600060405180830381600087803b15801561354357600080fd5b505af1158015613557573d6000803e3d6000fd5b5050505050505050565b816135d15760af5461357590600390614f94565b60a254613583906001614d6f565b11156135d15760405162461bcd60e51b815260206004820152601260248201527f756e6c6f636b206e6f7420616c6c6f77656400000000000000000000000000006044820152606401610c7d565b600084815260ab602052604080822054609b5491516331a9108f60e11b8152600481018890529092916001600160a01b031690636352211e90602401602060405180830381865afa15801561362a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364e9190614ddb565b600087815260ab6020526040902060078101805460ff60a01b1916905560038101879055426004909101819055609c5491925061368b9190614d6f565b600087815260ab6020526040812060050191909155609d548611156136b057856136b3565b60005b90506136ca6136c184614fb6565b6000198361324a565b60a280549060006136da83614fd2565b9091555050600087815260ab6020526040902060060154613703906001600160a01b0316613f6c565b600087815260ab602052604090206007015461372a9088906001600160a01b031686613398565b609a54600088815260ab6020526040908190206004808201546005909201549251636337e56160e11b81526001600160a01b0387811692820192909252602481018c9052604481018b90526064810192909252608482019290925260a4810186905291169063c66fcac29060c401600060405180830381600087803b1580156137b257600080fd5b505af11580156137c6573d6000803e3d6000fd5b5050505050505050505050565b6000808411801561380757508215806137eb57508183115b806138075750600185600281111561380557613805614903565b145b90505b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61386c614266565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6098546138cd906001600160a01b031683836142b8565b5050565b60006001600160a01b0382166138e957506000919050565b506001600160a01b03163b151590565b600054610100900460ff166139645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b6119426142e8565b600054610100900460ff166139d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b61194261435c565b60008060006139ee85856143d3565b915091506139fb81614418565b509392505050565b6000613a0f8383614f94565b61380a9085614e99565b6001600160a01b038216600090815260ac602090815260408083205480845260ab909252822060010180549192849261331c908490614d6f565b6000609d546001613a649190614d6f565b600081815260ad60209081526040808320805460ff1916600190811790915560b083528184208251808401909352805480845291015492820183905293945092613ab09290919061324a565b50609d8054600090815260b0602052604081208181556001015555565b6040516001600160a01b03808516602483015283166044820152606481018290526117db9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614562565b600080613b7183613e98565b9050806001600160a01b0316856001600160a01b031614613bd45760405162461bcd60e51b815260206004820152601e60248201527f7573657220616e64207369676e65725075626b6579206d69736d6174636800006044820152606401610c7d565b609d54609f54609e54600090613beb908890614d6f565b905080609e8190555060405180610120016040528088815260200160008152602001848152602001600081526020016000815260200160008152602001856001600160a01b0316815260200160006001600160a01b0316815260200160016002811115613c5a57613c5a614903565b9052600083815260ab60209081526040918290208351815590830151600182015590820151600280830191909155606083015160038301556080830151600483015560a0830151600583015560c08301516006830180546001600160a01b03199081166001600160a01b039384161790915560e0850151600785018054928316919093169081178355610100860151937fffffffffffffffffffffff0000000000000000000000000000000000000000009092161790600160a01b908490811115613d2757613d27614903565b02179055505050600082815260b1602090815260408083208690556001600160a01b038716835260ac9091528120839055613d6690889060019061324a565b613d71826001614d6f565b609f55613d7d84614072565b609a5460405163056de39160e41b81526001600160a01b03909116906356de391090613db79087908a90879089908e908990600401614feb565b600060405180830381600087803b158015613dd157600080fd5b505af1158015613de5573d6000803e3d6000fd5b5050609b546040516340c10f1960e01b81526001600160a01b038c811660048301526024820187905290911692506340c10f199150604401600060405180830381600087803b158015613e3757600080fd5b505af1158015613e4b573d6000803e3d6000fd5b50939a9950505050505050505050565b613e636131f7565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586138993390565b60008151604014613eeb5760405162461bcd60e51b815260206004820152600760248201527f6e6f7420707562000000000000000000000000000000000000000000000000006044820152606401610c7d565b815160208301206001600160a01b03811615801590613f2057506001600160a01b038116600090815260ac6020526040902054155b6114f25760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e65720000000000000000000000000000000000006044820152606401610c7d565b60a15460005b8181101561147757826001600160a01b031660a18281548110613f9757613f97614d95565b6000918252602090912001546001600160a01b0316036140605760a1613fbe600184614d82565b81548110613fce57613fce614d95565b60009182526020909120015460a180546001600160a01b039092169183908110613ffa57613ffa614d95565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a180548061403957614039615032565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b8061406a81614fd2565b915050613f72565b60a180546001808201835560008381527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987890920180546001600160a01b0319166001600160a01b038616179055915490916140cc91614d82565b9050805b801561416b57600060a16140e5600184614d82565b815481106140f5576140f5614d95565b6000918252602090912001546001600160a01b039081169150841681101561411d575061416b565b8060a1838154811061413157614131614d95565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790555061416481614dab565b90506140d0565b818114611477578260a1828154811061418657614186614d95565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015614209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422d9190614dc2565b90506117db8463095ea7b360e01b856142468686614d6f565b6040516001600160a01b0390921660248301526044820152606401613b01565b60655460ff166119425760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c7d565b6040516001600160a01b03831660248201526044810182905261147790849063a9059cbb60e01b90606401613b01565b600054610100900460ff166143535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b61194233613812565b600054610100900460ff166143c75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7d565b6065805460ff19169055565b60008082516041036144095760208301516040840151606085015160001a6143fd8782858561464a565b94509450505050614411565b506000905060025b9250929050565b600081600481111561442c5761442c614903565b036144345750565b600181600481111561444857614448614903565b036144955760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c7d565b60028160048111156144a9576144a9614903565b036144f65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c7d565b600381600481111561450a5761450a614903565b03612ee45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c7d565b60006145b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661470e9092919063ffffffff16565b90508051600014806145d85750808060200190518101906145d89190615048565b6114775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c7d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156146815750600090506003614705565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156146d5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166146fe57600060019250925050614705565b9150600090505b94509492505050565b606061380a848460008585600080866001600160a01b031685876040516147359190615065565b60006040518083038185875af1925050503d8060008114614772576040519150601f19603f3d011682016040523d82523d6000602084013e614777565b606091505b509150915061478887838387614793565b979650505050505050565b606083156148025782516000036147fb576001600160a01b0385163b6147fb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c7d565b508161380a565b61380a83838151156148175781518083602001fd5b8060405162461bcd60e51b8152600401610c7d9190615081565b8015158114612ee457600080fd5b60008060006060848603121561485457600080fd5b8335925060208401359150604084013561486d81614831565b809150509250925092565b60006020828403121561488a57600080fd5b5035919050565b600080604083850312156148a457600080fd5b82359150602083013563ffffffff811681146148bf57600080fd5b809150509250929050565b6001600160a01b0381168114612ee457600080fd5b6000602082840312156148f157600080fd5b81356148fc816148ca565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6000610120820190508a82528960208301528860408301528760608301528660808301528560a08301526001600160a01b0380861660c084015280851660e0840152506003831061497a57634e487b7160e01b600052602160045260246000fd5b826101008301529a9950505050505050505050565b60008060008060008060c087890312156149a857600080fd5b86356149b3816148ca565b955060208701356149c3816148ca565b945060408701356149d3816148ca565b935060608701356149e3816148ca565b925060808701356149f3816148ca565b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614a4757614a47614a08565b604052919050565b600067ffffffffffffffff821115614a6957614a69614a08565b5060051b60200190565b600082601f830112614a8457600080fd5b81356020614a99614a9483614a4f565b614a1e565b82815260059290921b84018101918181019086841115614ab857600080fd5b8286015b84811015614ad35780358352918301918301614abc565b509695505050505050565b600082601f830112614aef57600080fd5b813567ffffffffffffffff811115614b0957614b09614a08565b614b1c601f8201601f1916602001614a1e565b818152846020838601011115614b3157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a031215614b6957600080fd5b87359650602080890135614b7c816148ca565b96506040890135955060608901359450608089013567ffffffffffffffff80821115614ba757600080fd5b818b0191508b601f830112614bbb57600080fd5b8135614bc9614a9482614a4f565b81815260059190911b8301840190848101908e831115614be857600080fd5b938501935b82851015614c0f578435614c00816148ca565b82529385019390850190614bed565b9750505060a08b0135925080831115614c2757600080fd5b614c338c848d01614a73565b945060c08b0135925080831115614c4957600080fd5b5050614c578a828b01614ade565b91505092959891949750929550565b600080600060608486031215614c7b57600080fd5b8335614c86816148ca565b925060208401359150604084013567ffffffffffffffff811115614ca957600080fd5b614cb586828701614ade565b9150509250925092565b60008060408385031215614cd257600080fd5b8235915060208301356148bf816148ca565b60008060408385031215614cf757600080fd5b8235614d02816148ca565b915060208301356148bf81614831565b60008060408385031215614d2557600080fd5b82359150602083013567ffffffffffffffff811115614d4357600080fd5b614d4f85828601614ade565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b808201808211156114f2576114f2614d59565b818103818111156114f2576114f2614d59565b634e487b7160e01b600052603260045260246000fd5b600081614dba57614dba614d59565b506000190190565b600060208284031215614dd457600080fd5b5051919050565b600060208284031215614ded57600080fd5b81516148fc816148ca565b87815260006020888184015287604084015286606084015260808301865182880160005b82811015614e415781516001600160a01b031684529284019290840190600101614e1c565b5050865183880192915060005b81811015614e6a57835183529284019291840191600101614e4e565b5050614e87818760601b6bffffffffffffffffffffffff19169052565b6014019b9a5050505050505050505050565b80820281158282048414176114f2576114f2614d59565b60005b83811015614ecb578181015183820152602001614eb3565b50506000910152565b60008151808452614eec816020860160208601614eb0565b601f01601f19169290920160200192915050565b84815260006001600160a01b03808616602084015280851660408401525060806060830152614f326080830184614ed4565b9695505050505050565b80820260008212600160ff1b84141615614f5857614f58614d59565b81810583148215176114f2576114f2614d59565b8082018281126000831280158216821582161715614f8c57614f8c614d59565b505092915050565b600082614fb157634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b8201614fcb57614fcb614d59565b5060000390565b600060018201614fe457614fe4614d59565b5060010190565b6001600160a01b038716815260c06020820152600061500d60c0830188614ed4565b90508560408301528460608301528360808301528260a0830152979650505050505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561505a57600080fd5b81516148fc81614831565b60008251615077818460208701614eb0565b9190910192915050565b6020815260006148fc6020830184614ed456fea164736f6c6343000814000a",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "SequencerRewardRecipientChanged(uint256,address)": {
        "details": "Emitted when reward recipient address update in 'setSequencerRewardRecipient'",
        "params": {
          "recipient": "the address receive reward token",
          "sequencerId": "the sequencerId"
        }
      },
      "SetCurrentBatch(uint256)": {
        "details": "Emitted when current batch update in 'SetCurrentBatch'",
        "params": {
          "_newCurrentBatch": "new batch id."
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "UpdateLockingInfo(address)": {
        "details": "Emitted when nft contract update in 'UpdateLockingInfo'",
        "params": {
          "_newLockingInfo": "new contract address."
        }
      },
      "UpdateMaxAmounts(uint256)": {
        "details": "Emitted when min lock amount update in 'UpdateMaxAmounts'",
        "params": {
          "_newMaxLock": "new max lock."
        }
      },
      "UpdateMinAmounts(uint256)": {
        "details": "Emitted when min lock amount update in 'UpdateMinAmounts'",
        "params": {
          "_newMinLock": "new min lock."
        }
      },
      "UpdateMpc(address)": {
        "details": "Emitted when mpc address update in 'UpdateMpc'",
        "params": {
          "_newMpc": "new min lock."
        }
      },
      "UpdateNFTContract(address)": {
        "details": "Emitted when nft contract update in 'UpdateNFTContract'",
        "params": {
          "_newNftContract": "new contract address."
        }
      },
      "UpdateSignerUpdateLimit(uint256)": {
        "details": "Emitted when signer update limit update in 'UpdateSignerUpdateLimit'",
        "params": {
          "_newLimit": "new limit."
        }
      },
      "WhiteListAdded(address,bool)": {
        "details": "Emitted when white address update in 'setWhiteListAddress'",
        "params": {
          "user": "the address who can lock token",
          "verified": "white address state"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "batchSubmitRewards(uint256,address,uint256,uint256,address[],uint256[],bytes)": {
        "details": "batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution",
        "params": {
          "_sequencers": "Those sequencers can receive rewards",
          "batchId": "The batchId that submitted the reward is that",
          "endEpoch": "The endEpoch that submitted the reward is that",
          "finishedBlocks": "How many blocks each sequencer finished.",
          "payeer": "Who Pays the Reward Tokens",
          "signature": "Confirmed by mpc and signed for reward distribution",
          "startEpoch": "The startEpoch that submitted the reward is that"
        }
      },
      "currentSequencerSetSize()": {
        "details": "currentSequencerSetSize  get all sequencer count"
      },
      "currentSequencerSetTotalLock()": {
        "details": "currentSequencerSetTotalLock get total lock amount for all sequencers"
      },
      "fetchMpcAddress(uint256)": {
        "details": "fetchMpcAddress query mpc address by L1 block height, used by batch-submitter",
        "params": {
          "blockHeight": "the L1 block height"
        }
      },
      "forceUnlock(uint256,uint32)": {
        "details": "forceUnlock Allow owner to force a sequencer node to exit",
        "params": {
          "l2Gas": "bridge reward to L2 gasLimit",
          "sequencerId": "unique integer to identify a sequencer."
        }
      },
      "getSequencerId(address)": {
        "details": "getSequencerId query sequencer id by signer address",
        "params": {
          "user": "sequencer signer address"
        }
      },
      "lockFor(address,uint256,bytes)": {
        "details": "lockFor is used to lock Metis and participate in the sequencer block node application",
        "params": {
          "amount": "Amount of L1 metis token to lock for.",
          "signerPubkey": "sequencer signer pubkey",
          "user": "sequencer signer address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "ownerOf query owner of the NFT",
        "params": {
          "tokenId": "NFT token id"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "relock(uint256,uint256,bool)": {
        "details": "relock Allow sequencer to increase the amount of locked positions",
        "params": {
          "amount": "Amount of L1 metis token to relock for.",
          "lockRewards": "Whether to lock the current rewards",
          "sequencerId": "unique integer to identify a sequencer."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sequencerLock(uint256)": {
        "details": "sequencerLock return the total lock amount of sequencer",
        "params": {
          "sequencerId": "sequencer id"
        }
      },
      "sequencerReward(uint256)": {
        "details": "sequencerReward query sequencer current reward",
        "params": {
          "sequencerId": "sequencerid"
        }
      },
      "setPause()": {
        "details": "setPause can set the contract not suspended status"
      },
      "setSequencerRewardRecipient(uint256,address)": {
        "details": "setSequencerRewardRecipient Allow sequencer owner to set a reward recipient",
        "params": {
          "recipient": "Who will receive the reward token",
          "sequencerId": "The sequencerId"
        }
      },
      "setUnpause()": {
        "details": "setUnpause can cancel the suspended state"
      },
      "setWhiteListAddress(address,bool)": {
        "details": "setWhiteListAddress Allow owner to update white address list",
        "params": {
          "user": "the address who can lock token",
          "verified": "white address state"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(uint256,uint32)": {
        "details": "unlock is used to unlock Metis and exit the sequencer node",
        "params": {
          "l2Gas": "bridge reward to L2 gasLimit",
          "sequencerId": "sequencer id"
        }
      },
      "unlockClaim(uint256,uint32)": {
        "details": "unlockClaim Because unlock has a waiting period, after the waiting period is over, you can claim locked tokens",
        "params": {
          "l2Gas": "bridge reward to L2 gasLimit",
          "sequencerId": "sequencer id"
        }
      },
      "updateLockingInfo(address)": {
        "details": "updateLockingInfo Allow owner update the locking info contract address",
        "params": {
          "_lockingInfo": "new locking info contract address"
        }
      },
      "updateMaxAmounts(uint256)": {
        "details": "updateMaxAmounts Allow owner to update max lock amount",
        "params": {
          "_maxLock": "new max lock amount"
        }
      },
      "updateMinAmounts(uint256)": {
        "details": "updateMinAmounts Allow owner to update min lock amount",
        "params": {
          "_minLock": "new min lock amount"
        }
      },
      "updateMpc(address)": {
        "details": "updateMpc Allow owner to update new mpc address",
        "params": {
          "_newMpc": "new mpc"
        }
      },
      "updateNFTContract(address)": {
        "details": "updateNFTContract Allow owner update the NFT contract address",
        "params": {
          "_nftContract": "new NFT contract address"
        }
      },
      "updatePerSecondReward(uint256)": {
        "details": "updatePerSecondReward  Allow owner to set per block reward",
        "params": {
          "newReward": "the new reward"
        }
      },
      "updateSequencerThreshold(uint256)": {
        "details": "updateSequencerThreshold  Allow owner to set max sequencer threshold",
        "params": {
          "newThreshold": "the new threshold"
        }
      },
      "updateSigner(uint256,bytes)": {
        "details": "updateSigner Allow sqeuencer to update new signers to replace old signer addresses，and NFT holder will be transfer driectly",
        "params": {
          "sequencerId": "unique integer to identify a sequencer.",
          "signerPubkey": "the new signer pubkey address"
        }
      },
      "updateSignerUpdateLimit(uint256)": {
        "details": "updateSignerUpdateLimit Allow owner to set signer update max limit",
        "params": {
          "_limit": "new limit"
        }
      },
      "updateWithdrawDelayTimeValue(uint256)": {
        "details": "updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.",
        "params": {
          "newWithdrawDelayTime": "new withdraw delay time"
        }
      },
      "withdrawRewards(uint256,uint32)": {
        "details": "withdrawRewards withdraw current rewards",
        "params": {
          "l2Gas": "bridge reward to L2 gasLimit",
          "sequencerId": "unique integer to identify a sequencer."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 428,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5531,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "bridge",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 5533,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "l1Token",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 5535,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "l2Token",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 5538,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "logger",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(LockingInfo)5339"
      },
      {
        "astId": 5541,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "NFTContract",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(LockingNFT)5453"
      },
      {
        "astId": 5543,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "WITHDRAWAL_DELAY",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 5545,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "currentBatch",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 5547,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "totalLocked",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 5549,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "NFTCounter",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 5551,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "totalRewardsLiquidated",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 5554,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "signers",
        "offset": 0,
        "slot": "161",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5556,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "currentUnlockedInit",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 5558,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "lastRewardEpochId",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 5560,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "lastRewardTime",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 5562,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "perSecondReward",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 5564,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "minLock",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 5566,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "maxLock",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 5568,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "signerUpdateLimit",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 5570,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "mpcAddress",
        "offset": 0,
        "slot": "169",
        "type": "t_address"
      },
      {
        "astId": 5572,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "sequencerThreshold",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 5577,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "sequencers",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_uint256,t_struct(Sequencer)5522_storage)"
      },
      {
        "astId": 5581,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "signerToSequencer",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5585,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "batchSubmitHistory",
        "offset": 0,
        "slot": "173",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5588,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "sequencerState",
        "offset": 0,
        "slot": "174",
        "type": "t_struct(State)5497_storage"
      },
      {
        "astId": 5593,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "sequencerStateChanges",
        "offset": 0,
        "slot": "176",
        "type": "t_mapping(t_uint256,t_struct(StateChange)5502_storage)"
      },
      {
        "astId": 5597,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "latestSignerUpdateBatch",
        "offset": 0,
        "slot": "177",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5601,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "whiteListAddresses",
        "offset": 0,
        "slot": "178",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5605,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "whiteListBoundSequencer",
        "offset": 0,
        "slot": "179",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5609,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "mpcHistory",
        "offset": 0,
        "slot": "180",
        "type": "t_array(t_struct(MpcHistoryItem)5492_storage)dyn_storage"
      },
      {
        "astId": 5611,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "l2ChainId",
        "offset": 0,
        "slot": "181",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MpcHistoryItem)5492_storage)dyn_storage": {
        "base": "t_struct(MpcHistoryItem)5492_storage",
        "encoding": "dynamic_array",
        "label": "struct LockingPool.MpcHistoryItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LockingInfo)5339": {
        "encoding": "inplace",
        "label": "contract LockingInfo",
        "numberOfBytes": "20"
      },
      "t_contract(LockingNFT)5453": {
        "encoding": "inplace",
        "label": "contract LockingNFT",
        "numberOfBytes": "20"
      },
      "t_enum(Status)5487": {
        "encoding": "inplace",
        "label": "enum LockingPool.Status",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Sequencer)5522_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LockingPool.Sequencer)",
        "numberOfBytes": "32",
        "value": "t_struct(Sequencer)5522_storage"
      },
      "t_mapping(t_uint256,t_struct(StateChange)5502_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LockingPool.StateChange)",
        "numberOfBytes": "32",
        "value": "t_struct(StateChange)5502_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MpcHistoryItem)5492_storage": {
        "encoding": "inplace",
        "label": "struct LockingPool.MpcHistoryItem",
        "members": [
          {
            "astId": 5489,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5491,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "newMpcAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Sequencer)5522_storage": {
        "encoding": "inplace",
        "label": "struct LockingPool.Sequencer",
        "members": [
          {
            "astId": 5504,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5506,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5508,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "activationBatch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5510,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "deactivationBatch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5512,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "deactivationTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5514,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "unlockClaimTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5516,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "signer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5518,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "rewardRecipient",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5521,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "status",
            "offset": 20,
            "slot": "7",
            "type": "t_enum(Status)5487"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(State)5497_storage": {
        "encoding": "inplace",
        "label": "struct LockingPool.State",
        "members": [
          {
            "astId": 5494,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5496,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "lockerCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StateChange)5502_storage": {
        "encoding": "inplace",
        "label": "struct LockingPool.StateChange",
        "members": [
          {
            "astId": 5499,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 5501,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "lockerCount",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}